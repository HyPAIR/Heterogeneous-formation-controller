<launch>
  <arg name="model_name"/>
  <arg name="mur_ns"/>
  <arg name="prefix"/>

  <!-- move_group settings -->
  <arg name="pipeline" default="ompl" />
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>
  <arg name="set_global_robot_description" default="false"/>

  <arg name="capabilities" default=""/>
  <arg name="disable_capabilities" default=""/>
  <!-- load these non-default MoveGroup capabilities (space seperated) -->
  <!--
  <arg name="capabilities" value="
                a_package/AwsomeMotionPlanningCapability
                another_package/GraspPlanningPipeline
                " />
  -->

  <!-- inhibit these default MoveGroup capabilities (space seperated) -->
  <!--
  <arg name="disable_capabilities" value="
                move_group/MoveGroupKinematicsService
                move_group/ClearOctomapService
                " />
  -->

  <!-- load URDF, SRDF and joint_limits configuration -->
  <include file="$(find mur_moveit_config)/launch/planning_context.launch" ns="/$(arg mur_ns)">
    <arg name="prefix" value="$(arg prefix)"/>
    <arg name="model_name" value="$(arg model_name)"/>
    <arg name="set_global_robot_description" value="$(arg set_global_robot_description)"/>
  </include>

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find mur_moveit_config)/launch/planning_pipeline.launch">
    <arg name="pipeline" value="$(arg pipeline)" />
    <arg name="prefix" value="$(arg prefix)" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find mur_moveit_config)/launch/trajectory_execution.launch" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="$(arg model_name)" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
    <arg name="prefix" value="$(arg prefix)"/>
    <arg name="mur_ns" value="$(arg mur_ns)"/>
  </include>

  <!-- Sensors Functionality -->
  <include ns="move_group" file="$(find mur_moveit_config)/launch/sensor_manager.launch" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="$(arg model_name)" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
    <param name="capabilities" value="$(arg capabilities)"/>
    <param name="disable_capabilities" value="$(arg disable_capabilities)"/>


    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>

</launch>
