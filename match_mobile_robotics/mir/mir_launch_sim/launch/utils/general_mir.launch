<?xml version="1.0" ?>
<launch>
	<arg name="tf_prefix"    default="" />
	<arg name="robot_x"   default="0.0" />
	<arg name="robot_y"   default="0.0" />
	<arg name="robot_yaw" default="0.0" />  
	<arg name="model_name" default=""/>
    <arg name="robot_urdf_path" />

	<arg name="move_base_selector" doc="move_base or move_base_flex"/>
	<arg name="global_planner" doc="Name of the global planner that should be used by the navigation stack" />
	<arg name="global_planner_config" doc="Path to the global config file." />
	<arg name="local_planner" doc="Name of the local planner that should be used by the navigation stack"/>
	<arg name="local_planner_config" doc="Path to the local config file." />
	<arg name="localization_type" default="ground_truth" />
	<arg name="localization_mode" default="0" />

	<!-- load the joint state controller config (list of passive joints) -->
	<arg name="gazebo_joint_state_controller_config" default="$(find mir_launch_sim)/config/gazebo_joint_state_controller.yaml" />

	<!-- The model name of the robot_description cannot be empty when using no namespace. So use a default model name instead-->
	<arg if="$(eval model_name=='')" name="robot_description_model_name" value="mir" />
	<arg unless="$(eval model_name=='')" name="robot_description_model_name" value="$(arg model_name)" /> 

	<arg if="$(eval tf_prefix=='')" name="tf_prefix_slashed" value="" /> <!--Important for proper substitution (empty tf_prefix must not lead to leading slashes-->
	<arg unless="$(eval tf_prefix=='')" name="tf_prefix_slashed" value="$(arg tf_prefix)/" /> <!--Important for proper substitution (empty tf_prefix must not lead to leading slashes-->
	 
	<!-- Load URDF -->
	<param name="robot_description" command="$(find xacro)/xacro $(arg robot_urdf_path) robot_namespace:=$(arg model_name) tf_prefix:=$(arg tf_prefix)" />

	<!-- Spawn the robot into Gazebo -->
	<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_description_model_name)
		-x $(arg robot_x) -y $(arg robot_y) -Y $(arg robot_yaw) " />

	<!-- Start the controllers -->
	<rosparam file="$(arg gazebo_joint_state_controller_config)" command="load" subst_value="true"/>
	<rosparam file="$(find mir_launch_sim)/config/gazebo_diffdrive_controller.yaml" command="load" subst_value="true"/>
	<node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen"
		args="joint_state_controller mobile_base_controller">
	</node>

	<group if="$(eval localization_mode == 1)">
		<include file="$(find mir_navigation)/launch/amcl.launch">
			<arg name="tf_prefix" value="$(arg tf_prefix)"/>
			<arg name="initial_pose_x"  value="$(arg robot_x)"/>
			<arg name="initial_pose_y"  value="$(arg robot_y)"/>
			<arg name="initial_pose_a"  value="$(arg robot_yaw)"/>
		</include>
	</group>
	
	<!-- gazebo uses topics mobile_base_controller/* -->
	<node name="relay" pkg="topic_tools" type="relay" args="cmd_vel mobile_base_controller/cmd_vel" />
	<remap to="mobile_base_controller/cmd_vel" from="cmd_vel" />
	<remap from="odom" to="mobile_base_controller/odom"/>
	<!-- Start of move base or move base flex -->
	<group if="$(eval move_base_selector=='move_base')">
		<include file="$(find mir_navigation)/launch/move_base.launch" pass_all_args="true">
			<arg name="global_planner" value="$(arg global_planner)"/>
			<arg name="local_planner" value="$(arg local_planner)"/>
		</include>
	</group>
	<group if="$(eval move_base_selector=='move_base_flex')">
		<include file="$(find mir_navigation)/launch/move_base_flex.launch" >
			<arg name="global_planner" value="$(arg global_planner)"/>
			<arg name="global_planner_config" value="$(arg global_planner_config)" />
			<arg name="local_planner" value="$(arg local_planner)"/>
			<arg name="local_planner_config" value="$(arg local_planner_config)" />
			<arg name="tf_prefix" value="$(arg tf_prefix)"/>
		</include>
	</group>

	<!-- Robot state publisher -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
		<param name="tf_prefix" value="$(arg tf_prefix)"/>
	</node>

	<!-- Add passive + mimic joints to joint_states topic -->
	<!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<rosparam param="source_list" subst_value="true">[joint_states]</rosparam>
		<param name="rate" value="200.0" />
		<param name="use_gui" value="false"/>
	</node> -->

	<!-- ground truth as a reference or fake localization -->
	<group if="$(eval localization_mode == 0)">
		<node name="fake_map_to_odom_tf_pub" pkg="tf" type="static_transform_publisher" 
			args="0.0 0.0 0.0 0.0 0.0 0.0 map $(arg tf_prefix_slashed)odom 100"/>

		<param name="mobile_base_controller/enable_odom_tf" value="false"/>
		<node name="fake_localization" pkg="mir_navigation" type="fake_localization.py" output="screen">
			<param name="parent_frame" value="$(arg tf_prefix_slashed)odom"/>
			<param name="child_frame" value="$(arg tf_prefix_slashed)base_footprint"/>
		</node>
	</group>

	<!-- These nodes publish the topics b_scan and f_scan to the scan topic-->
	<!-- Noetic note: If the scan messages contain the same timespamp an error occures. Therefore change to new scan_merger.py-->
	<!-- <node pkg="topic_tools" type="relay" name="b_scan_relay" args="b_scan scan"/>
	<node pkg="topic_tools" type="relay" name="f_scan_relay" args="f_scan scan"/> -->

	<!-- New scan_merger node that checks if time stamps are equal and then adds one nanosecond to prevent double publishing of the transformation by amcl-->
	<node name="mir_laser_merger" pkg="mir_navigation" type="scan_merger.py" output="screen">
		<rosparam param="scan_input_topics">[f_scan, b_scan]</rosparam>
		<param name="scan_output_topic" value="scan"/>
	</node>

	<node name="b_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
		<remap from="scan" to="b_scan" />
		<remap from="scan_filtered" to="b_scan_rep117" />
	</node>

	<node name="f_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
		<remap from="scan" to="f_scan" />
		<remap from="scan_filtered" to="f_scan_rep117" />
	</node>

	<node name="mir_pose_simple" pkg="mir_navigation" type="mir_pose_simple.py" output="screen">
		<param name="localization_type" value="$(arg localization_type)"/>
		<param name="odom_topic" value="mobile_base_controller/odom"/>
		<param name="amcl_pose_topic" value="amcl_pose"/>
		<param name="groud_truth_topic" value="ground_truth"/>
	</node>


</launch>
