"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import bot_core.position_3d_t

class grasp_transition_state_t(object):
    __slots__ = ["utime", "affordance_uid", "hand_pose", "grasp_on", "grasp_type", "power_grasp", "num_joints", "joint_name", "joint_position"]

    LEFT = 0
    RIGHT = 1

    def __init__(self):
        self.utime = 0
        self.affordance_uid = 0
        self.hand_pose = bot_core.position_3d_t()
        self.grasp_on = False
        self.grasp_type = 0
        self.power_grasp = False
        self.num_joints = 0
        self.joint_name = []
        self.joint_position = []

    def encode(self):
        buf = BytesIO()
        buf.write(grasp_transition_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.affordance_uid))
        assert self.hand_pose._get_packed_fingerprint() == bot_core.position_3d_t._get_packed_fingerprint()
        self.hand_pose._encode_one(buf)
        buf.write(struct.pack(">bhbi", self.grasp_on, self.grasp_type, self.power_grasp, self.num_joints))
        for i0 in range(self.num_joints):
            __joint_name_encoded = self.joint_name[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__joint_name_encoded)+1))
            buf.write(__joint_name_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_position[:self.num_joints]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != grasp_transition_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return grasp_transition_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = grasp_transition_state_t()
        self.utime, self.affordance_uid = struct.unpack(">qi", buf.read(12))
        self.hand_pose = bot_core.position_3d_t._decode_one(buf)
        self.grasp_on = bool(struct.unpack('b', buf.read(1))[0])
        self.grasp_type = struct.unpack(">h", buf.read(2))[0]
        self.power_grasp = bool(struct.unpack('b', buf.read(1))[0])
        self.num_joints = struct.unpack(">i", buf.read(4))[0]
        self.joint_name = []
        for i0 in range(self.num_joints):
            __joint_name_len = struct.unpack('>I', buf.read(4))[0]
            self.joint_name.append(buf.read(__joint_name_len)[:-1].decode('utf-8', 'replace'))
        self.joint_position = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if grasp_transition_state_t in parents: return 0
        newparents = parents + [grasp_transition_state_t]
        tmphash = (0x1b288dd50aa79ac7+ bot_core.position_3d_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if grasp_transition_state_t._packed_fingerprint is None:
            grasp_transition_state_t._packed_fingerprint = struct.pack(">Q", grasp_transition_state_t._get_hash_recursive([]))
        return grasp_transition_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

