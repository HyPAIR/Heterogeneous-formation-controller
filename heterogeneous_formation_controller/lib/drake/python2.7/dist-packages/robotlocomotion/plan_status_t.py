"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class plan_status_t(object):
    __slots__ = ["utime", "execution_status", "last_plan_msg_utime", "last_plan_start_utime", "plan_type", "recovery_enabled", "bracing_enabled"]

    EXECUTION_STATUS_EXECUTING = 0
    EXECUTION_STATUS_FINISHED = 1
    EXECUTION_STATUS_NO_PLAN = 2
    UNKNOWN = 0
    STANDING = 1
    WALKING = 2
    HARNESSED = 3
    QUASISTATIC = 4
    BRACING = 5
    CRAWLING = 6
    DUMMY = 7
    MANIPULATING = 8
    RECOVERING = 9

    def __init__(self):
        self.utime = 0
        self.execution_status = 0
        self.last_plan_msg_utime = 0
        self.last_plan_start_utime = 0
        self.plan_type = 0
        self.recovery_enabled = False
        self.bracing_enabled = False

    def encode(self):
        buf = BytesIO()
        buf.write(plan_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbqqbbb", self.utime, self.execution_status, self.last_plan_msg_utime, self.last_plan_start_utime, self.plan_type, self.recovery_enabled, self.bracing_enabled))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != plan_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return plan_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = plan_status_t()
        self.utime, self.execution_status, self.last_plan_msg_utime, self.last_plan_start_utime, self.plan_type = struct.unpack(">qbqqb", buf.read(26))
        self.recovery_enabled = bool(struct.unpack('b', buf.read(1))[0])
        self.bracing_enabled = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if plan_status_t in parents: return 0
        tmphash = (0xf946fe88ee1f80d4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if plan_status_t._packed_fingerprint is None:
            plan_status_t._packed_fingerprint = struct.pack(">Q", plan_status_t._get_hash_recursive([]))
        return plan_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

