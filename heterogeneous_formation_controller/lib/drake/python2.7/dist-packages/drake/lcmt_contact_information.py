"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_contact_information(object):
    __slots__ = ["timestamp", "body_name", "num_contact_points", "num_basis_per_contact_point", "contact_points", "normal", "mu", "Kd", "weight", "acceleration_constraint_type"]

    def __init__(self):
        self.timestamp = 0
        self.body_name = ""
        self.num_contact_points = 0
        self.num_basis_per_contact_point = 0
        self.contact_points = [ [] for dim0 in range(3) ]
        self.normal = [ 0.0 for dim0 in range(3) ]
        self.mu = 0.0
        self.Kd = 0.0
        self.weight = 0.0
        self.acceleration_constraint_type = 0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_contact_information._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __body_name_encoded = self.body_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__body_name_encoded)+1))
        buf.write(__body_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ii", self.num_contact_points, self.num_basis_per_contact_point))
        for i0 in range(3):
            buf.write(struct.pack('>%dd' % self.num_contact_points, *self.contact_points[i0][:self.num_contact_points]))
        buf.write(struct.pack('>3d', *self.normal[:3]))
        buf.write(struct.pack(">dddb", self.mu, self.Kd, self.weight, self.acceleration_constraint_type))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_contact_information._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_contact_information._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_contact_information()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __body_name_len = struct.unpack('>I', buf.read(4))[0]
        self.body_name = buf.read(__body_name_len)[:-1].decode('utf-8', 'replace')
        self.num_contact_points, self.num_basis_per_contact_point = struct.unpack(">ii", buf.read(8))
        self.contact_points = []
        for i0 in range(3):
            self.contact_points.append(struct.unpack('>%dd' % self.num_contact_points, buf.read(self.num_contact_points * 8)))
        self.normal = struct.unpack('>3d', buf.read(24))
        self.mu, self.Kd, self.weight, self.acceleration_constraint_type = struct.unpack(">dddb", buf.read(25))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_contact_information in parents: return 0
        tmphash = (0x1ad8a59d71adf51) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_contact_information._packed_fingerprint is None:
            lcmt_contact_information._packed_fingerprint = struct.pack(">Q", lcmt_contact_information._get_hash_recursive([]))
        return lcmt_contact_information._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

