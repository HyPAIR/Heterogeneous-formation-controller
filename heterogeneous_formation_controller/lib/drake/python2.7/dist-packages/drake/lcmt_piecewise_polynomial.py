"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import drake.lcmt_polynomial_matrix

class lcmt_piecewise_polynomial(object):
    __slots__ = ["timestamp", "num_breaks", "breaks", "num_segments", "polynomial_matrices"]

    def __init__(self):
        self.timestamp = 0
        self.num_breaks = 0
        self.breaks = []
        self.num_segments = 0
        self.polynomial_matrices = []

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_piecewise_polynomial._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.num_breaks))
        buf.write(struct.pack('>%dd' % self.num_breaks, *self.breaks[:self.num_breaks]))
        buf.write(struct.pack(">i", self.num_segments))
        for i0 in range(self.num_segments):
            assert self.polynomial_matrices[i0]._get_packed_fingerprint() == drake.lcmt_polynomial_matrix._get_packed_fingerprint()
            self.polynomial_matrices[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_piecewise_polynomial._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_piecewise_polynomial._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_piecewise_polynomial()
        self.timestamp, self.num_breaks = struct.unpack(">qi", buf.read(12))
        self.breaks = struct.unpack('>%dd' % self.num_breaks, buf.read(self.num_breaks * 8))
        self.num_segments = struct.unpack(">i", buf.read(4))[0]
        self.polynomial_matrices = []
        for i0 in range(self.num_segments):
            self.polynomial_matrices.append(drake.lcmt_polynomial_matrix._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_piecewise_polynomial in parents: return 0
        newparents = parents + [lcmt_piecewise_polynomial]
        tmphash = (0x6392ab0e78c32254+ drake.lcmt_polynomial_matrix._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_piecewise_polynomial._packed_fingerprint is None:
            lcmt_piecewise_polynomial._packed_fingerprint = struct.pack(">Q", lcmt_piecewise_polynomial._get_hash_recursive([]))
        return lcmt_piecewise_polynomial._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

