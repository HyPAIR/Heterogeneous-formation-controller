"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_quadrotor_output_t(object):
    __slots__ = ["timestamp", "position", "orientation", "twist", "accelerometer", "gyroscope", "magnetometer", "lidar_returns", "rangefinder"]

    def __init__(self):
        self.timestamp = 0
        self.position = [ 0.0 for dim0 in range(3) ]
        self.orientation = [ 0.0 for dim0 in range(4) ]
        self.twist = [ 0.0 for dim0 in range(6) ]
        self.accelerometer = [ 0.0 for dim0 in range(3) ]
        self.gyroscope = [ 0.0 for dim0 in range(3) ]
        self.magnetometer = [ 0.0 for dim0 in range(3) ]
        self.lidar_returns = [ 0.0 for dim0 in range(100) ]
        self.rangefinder = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_quadrotor_output_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>3d', *self.position[:3]))
        buf.write(struct.pack('>4d', *self.orientation[:4]))
        buf.write(struct.pack('>6d', *self.twist[:6]))
        buf.write(struct.pack('>3d', *self.accelerometer[:3]))
        buf.write(struct.pack('>3d', *self.gyroscope[:3]))
        buf.write(struct.pack('>3d', *self.magnetometer[:3]))
        buf.write(struct.pack('>100d', *self.lidar_returns[:100]))
        buf.write(struct.pack(">d", self.rangefinder))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_quadrotor_output_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_quadrotor_output_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_quadrotor_output_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.position = struct.unpack('>3d', buf.read(24))
        self.orientation = struct.unpack('>4d', buf.read(32))
        self.twist = struct.unpack('>6d', buf.read(48))
        self.accelerometer = struct.unpack('>3d', buf.read(24))
        self.gyroscope = struct.unpack('>3d', buf.read(24))
        self.magnetometer = struct.unpack('>3d', buf.read(24))
        self.lidar_returns = struct.unpack('>100d', buf.read(800))
        self.rangefinder = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_quadrotor_output_t in parents: return 0
        tmphash = (0xcf4d3fa004f6e365) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_quadrotor_output_t._packed_fingerprint is None:
            lcmt_quadrotor_output_t._packed_fingerprint = struct.pack(">Q", lcmt_quadrotor_output_t._get_hash_recursive([]))
        return lcmt_quadrotor_output_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

