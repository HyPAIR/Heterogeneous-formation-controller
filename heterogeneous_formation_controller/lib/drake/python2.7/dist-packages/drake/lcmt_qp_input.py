"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import drake.lcmt_contact_information

import drake.lcmt_desired_dof_motions

import drake.lcmt_desired_centroidal_momentum_dot

import drake.lcmt_desired_body_motion

class lcmt_qp_input(object):
    __slots__ = ["timestamp", "num_contacts", "contact_information", "num_desired_body_motions", "desired_body_motions", "desired_dof_motions", "desired_centroidal_momentum_dot", "w_basis_reg"]

    def __init__(self):
        self.timestamp = 0
        self.num_contacts = 0
        self.contact_information = []
        self.num_desired_body_motions = 0
        self.desired_body_motions = []
        self.desired_dof_motions = drake.lcmt_desired_dof_motions()
        self.desired_centroidal_momentum_dot = drake.lcmt_desired_centroidal_momentum_dot()
        self.w_basis_reg = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_qp_input._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.num_contacts))
        for i0 in range(self.num_contacts):
            assert self.contact_information[i0]._get_packed_fingerprint() == drake.lcmt_contact_information._get_packed_fingerprint()
            self.contact_information[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.num_desired_body_motions))
        for i0 in range(self.num_desired_body_motions):
            assert self.desired_body_motions[i0]._get_packed_fingerprint() == drake.lcmt_desired_body_motion._get_packed_fingerprint()
            self.desired_body_motions[i0]._encode_one(buf)
        assert self.desired_dof_motions._get_packed_fingerprint() == drake.lcmt_desired_dof_motions._get_packed_fingerprint()
        self.desired_dof_motions._encode_one(buf)
        assert self.desired_centroidal_momentum_dot._get_packed_fingerprint() == drake.lcmt_desired_centroidal_momentum_dot._get_packed_fingerprint()
        self.desired_centroidal_momentum_dot._encode_one(buf)
        buf.write(struct.pack(">d", self.w_basis_reg))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_qp_input._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_qp_input._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_qp_input()
        self.timestamp, self.num_contacts = struct.unpack(">qi", buf.read(12))
        self.contact_information = []
        for i0 in range(self.num_contacts):
            self.contact_information.append(drake.lcmt_contact_information._decode_one(buf))
        self.num_desired_body_motions = struct.unpack(">i", buf.read(4))[0]
        self.desired_body_motions = []
        for i0 in range(self.num_desired_body_motions):
            self.desired_body_motions.append(drake.lcmt_desired_body_motion._decode_one(buf))
        self.desired_dof_motions = drake.lcmt_desired_dof_motions._decode_one(buf)
        self.desired_centroidal_momentum_dot = drake.lcmt_desired_centroidal_momentum_dot._decode_one(buf)
        self.w_basis_reg = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_qp_input in parents: return 0
        newparents = parents + [lcmt_qp_input]
        tmphash = (0xbfdc2566b13afd62+ drake.lcmt_contact_information._get_hash_recursive(newparents)+ drake.lcmt_desired_body_motion._get_hash_recursive(newparents)+ drake.lcmt_desired_dof_motions._get_hash_recursive(newparents)+ drake.lcmt_desired_centroidal_momentum_dot._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_qp_input._packed_fingerprint is None:
            lcmt_qp_input._packed_fingerprint = struct.pack(">Q", lcmt_qp_input._get_hash_recursive([]))
        return lcmt_qp_input._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

