"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_zmp_data(object):
    __slots__ = ["timestamp", "A", "B", "C", "D", "x0", "y0", "u0", "R", "Qy", "S", "s1", "s1dot", "s2", "s2dot"]

    def __init__(self):
        self.timestamp = 0
        self.A = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(4) ]
        self.B = [ [ 0.0 for dim1 in range(2) ] for dim0 in range(4) ]
        self.C = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(2) ]
        self.D = [ [ 0.0 for dim1 in range(2) ] for dim0 in range(2) ]
        self.x0 = [ [ 0.0 for dim1 in range(1) ] for dim0 in range(4) ]
        self.y0 = [ [ 0.0 for dim1 in range(1) ] for dim0 in range(2) ]
        self.u0 = [ [ 0.0 for dim1 in range(1) ] for dim0 in range(2) ]
        self.R = [ [ 0.0 for dim1 in range(2) ] for dim0 in range(2) ]
        self.Qy = [ [ 0.0 for dim1 in range(2) ] for dim0 in range(2) ]
        self.S = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(4) ]
        self.s1 = [ [ 0.0 for dim1 in range(1) ] for dim0 in range(4) ]
        self.s1dot = [ [ 0.0 for dim1 in range(1) ] for dim0 in range(4) ]
        self.s2 = 0.0
        self.s2dot = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_zmp_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        for i0 in range(4):
            buf.write(struct.pack('>4d', *self.A[i0][:4]))
        for i0 in range(4):
            buf.write(struct.pack('>2d', *self.B[i0][:2]))
        for i0 in range(2):
            buf.write(struct.pack('>4d', *self.C[i0][:4]))
        for i0 in range(2):
            buf.write(struct.pack('>2d', *self.D[i0][:2]))
        for i0 in range(4):
            buf.write(struct.pack('>1d', *self.x0[i0][:1]))
        for i0 in range(2):
            buf.write(struct.pack('>1d', *self.y0[i0][:1]))
        for i0 in range(2):
            buf.write(struct.pack('>1d', *self.u0[i0][:1]))
        for i0 in range(2):
            buf.write(struct.pack('>2d', *self.R[i0][:2]))
        for i0 in range(2):
            buf.write(struct.pack('>2d', *self.Qy[i0][:2]))
        for i0 in range(4):
            buf.write(struct.pack('>4d', *self.S[i0][:4]))
        for i0 in range(4):
            buf.write(struct.pack('>1d', *self.s1[i0][:1]))
        for i0 in range(4):
            buf.write(struct.pack('>1d', *self.s1dot[i0][:1]))
        buf.write(struct.pack(">dd", self.s2, self.s2dot))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_zmp_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_zmp_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_zmp_data()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.A = []
        for i0 in range(4):
            self.A.append(struct.unpack('>4d', buf.read(32)))
        self.B = []
        for i0 in range(4):
            self.B.append(struct.unpack('>2d', buf.read(16)))
        self.C = []
        for i0 in range(2):
            self.C.append(struct.unpack('>4d', buf.read(32)))
        self.D = []
        for i0 in range(2):
            self.D.append(struct.unpack('>2d', buf.read(16)))
        self.x0 = []
        for i0 in range(4):
            self.x0.append(struct.unpack('>1d', buf.read(8)))
        self.y0 = []
        for i0 in range(2):
            self.y0.append(struct.unpack('>1d', buf.read(8)))
        self.u0 = []
        for i0 in range(2):
            self.u0.append(struct.unpack('>1d', buf.read(8)))
        self.R = []
        for i0 in range(2):
            self.R.append(struct.unpack('>2d', buf.read(16)))
        self.Qy = []
        for i0 in range(2):
            self.Qy.append(struct.unpack('>2d', buf.read(16)))
        self.S = []
        for i0 in range(4):
            self.S.append(struct.unpack('>4d', buf.read(32)))
        self.s1 = []
        for i0 in range(4):
            self.s1.append(struct.unpack('>1d', buf.read(8)))
        self.s1dot = []
        for i0 in range(4):
            self.s1dot.append(struct.unpack('>1d', buf.read(8)))
        self.s2, self.s2dot = struct.unpack(">dd", buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_zmp_data in parents: return 0
        tmphash = (0x1e8955d5b19944bf) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_zmp_data._packed_fingerprint is None:
            lcmt_zmp_data._packed_fingerprint = struct.pack(">Q", lcmt_zmp_data._get_hash_recursive([]))
        return lcmt_zmp_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

