"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_support_data(object):
    __slots__ = ["timestamp", "body_name", "num_contact_pts", "contact_pts", "support_logic_map", "use_support_surface", "support_surface", "mu"]

    def __init__(self):
        self.timestamp = 0
        self.body_name = ""
        self.num_contact_pts = 0
        self.contact_pts = [ [] for dim0 in range(3) ]
        self.support_logic_map = [ False for dim0 in range(4) ]
        self.use_support_surface = False
        self.support_surface = [ 0.0 for dim0 in range(4) ]
        self.mu = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_support_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __body_name_encoded = self.body_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__body_name_encoded)+1))
        buf.write(__body_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.num_contact_pts))
        for i0 in range(3):
            buf.write(struct.pack('>%dd' % self.num_contact_pts, *self.contact_pts[i0][:self.num_contact_pts]))
        buf.write(struct.pack('>4b', *self.support_logic_map[:4]))
        buf.write(struct.pack(">b", self.use_support_surface))
        buf.write(struct.pack('>4f', *self.support_surface[:4]))
        buf.write(struct.pack(">d", self.mu))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_support_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_support_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_support_data()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __body_name_len = struct.unpack('>I', buf.read(4))[0]
        self.body_name = buf.read(__body_name_len)[:-1].decode('utf-8', 'replace')
        self.num_contact_pts = struct.unpack(">i", buf.read(4))[0]
        self.contact_pts = []
        for i0 in range(3):
            self.contact_pts.append(struct.unpack('>%dd' % self.num_contact_pts, buf.read(self.num_contact_pts * 8)))
        self.support_logic_map = map(bool, struct.unpack('>4b', buf.read(4)))
        self.use_support_surface = bool(struct.unpack('b', buf.read(1))[0])
        self.support_surface = struct.unpack('>4f', buf.read(16))
        self.mu = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_support_data in parents: return 0
        tmphash = (0x3f581e659bea3e57) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_support_data._packed_fingerprint is None:
            lcmt_support_data._packed_fingerprint = struct.pack(">Q", lcmt_support_data._get_hash_recursive([]))
        return lcmt_support_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

