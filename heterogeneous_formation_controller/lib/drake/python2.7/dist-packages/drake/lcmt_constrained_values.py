"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_constrained_values(object):
    __slots__ = ["timestamp", "size", "types", "weights", "values"]

    HARD = -1
    SKIP = 0
    SOFT = 1

    def __init__(self):
        self.timestamp = 0
        self.size = 0
        self.types = []
        self.weights = []
        self.values = []

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_constrained_values._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.size))
        buf.write(struct.pack('>%db' % self.size, *self.types[:self.size]))
        buf.write(struct.pack('>%dd' % self.size, *self.weights[:self.size]))
        buf.write(struct.pack('>%dd' % self.size, *self.values[:self.size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_constrained_values._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_constrained_values._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_constrained_values()
        self.timestamp, self.size = struct.unpack(">qi", buf.read(12))
        self.types = struct.unpack('>%db' % self.size, buf.read(self.size))
        self.weights = struct.unpack('>%dd' % self.size, buf.read(self.size * 8))
        self.values = struct.unpack('>%dd' % self.size, buf.read(self.size * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_constrained_values in parents: return 0
        tmphash = (0x5d6cd633aff6a330) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_constrained_values._packed_fingerprint is None:
            lcmt_constrained_values._packed_fingerprint = struct.pack(">Q", lcmt_constrained_values._get_hash_recursive([]))
        return lcmt_constrained_values._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

