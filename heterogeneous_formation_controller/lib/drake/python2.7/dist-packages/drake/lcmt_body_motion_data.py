"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import drake.lcmt_piecewise_polynomial

class lcmt_body_motion_data(object):
    __slots__ = ["timestamp", "body_or_frame_name", "spline", "quat_task_to_world", "translation_task_to_world", "xyz_kp_multiplier", "xyz_damping_ratio_multiplier", "expmap_kp_multiplier", "expmap_damping_ratio_multiplier", "weight_multiplier", "in_floating_base_nullspace", "control_pose_when_in_contact"]

    def __init__(self):
        self.timestamp = 0
        self.body_or_frame_name = ""
        self.spline = drake.lcmt_piecewise_polynomial()
        self.quat_task_to_world = [ 0.0 for dim0 in range(4) ]
        self.translation_task_to_world = [ 0.0 for dim0 in range(3) ]
        self.xyz_kp_multiplier = [ 0.0 for dim0 in range(3) ]
        self.xyz_damping_ratio_multiplier = [ 0.0 for dim0 in range(3) ]
        self.expmap_kp_multiplier = 0.0
        self.expmap_damping_ratio_multiplier = 0.0
        self.weight_multiplier = [ 0.0 for dim0 in range(6) ]
        self.in_floating_base_nullspace = False
        self.control_pose_when_in_contact = False

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_body_motion_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __body_or_frame_name_encoded = self.body_or_frame_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__body_or_frame_name_encoded)+1))
        buf.write(__body_or_frame_name_encoded)
        buf.write(b"\0")
        assert self.spline._get_packed_fingerprint() == drake.lcmt_piecewise_polynomial._get_packed_fingerprint()
        self.spline._encode_one(buf)
        buf.write(struct.pack('>4d', *self.quat_task_to_world[:4]))
        buf.write(struct.pack('>3d', *self.translation_task_to_world[:3]))
        buf.write(struct.pack('>3d', *self.xyz_kp_multiplier[:3]))
        buf.write(struct.pack('>3d', *self.xyz_damping_ratio_multiplier[:3]))
        buf.write(struct.pack(">dd", self.expmap_kp_multiplier, self.expmap_damping_ratio_multiplier))
        buf.write(struct.pack('>6d', *self.weight_multiplier[:6]))
        buf.write(struct.pack(">bb", self.in_floating_base_nullspace, self.control_pose_when_in_contact))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_body_motion_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_body_motion_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_body_motion_data()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __body_or_frame_name_len = struct.unpack('>I', buf.read(4))[0]
        self.body_or_frame_name = buf.read(__body_or_frame_name_len)[:-1].decode('utf-8', 'replace')
        self.spline = drake.lcmt_piecewise_polynomial._decode_one(buf)
        self.quat_task_to_world = struct.unpack('>4d', buf.read(32))
        self.translation_task_to_world = struct.unpack('>3d', buf.read(24))
        self.xyz_kp_multiplier = struct.unpack('>3d', buf.read(24))
        self.xyz_damping_ratio_multiplier = struct.unpack('>3d', buf.read(24))
        self.expmap_kp_multiplier, self.expmap_damping_ratio_multiplier = struct.unpack(">dd", buf.read(16))
        self.weight_multiplier = struct.unpack('>6d', buf.read(48))
        self.in_floating_base_nullspace = bool(struct.unpack('b', buf.read(1))[0])
        self.control_pose_when_in_contact = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_body_motion_data in parents: return 0
        newparents = parents + [lcmt_body_motion_data]
        tmphash = (0xb033435a268e26f+ drake.lcmt_piecewise_polynomial._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_body_motion_data._packed_fingerprint is None:
            lcmt_body_motion_data._packed_fingerprint = struct.pack(">Q", lcmt_body_motion_data._get_hash_recursive([]))
        return lcmt_body_motion_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

