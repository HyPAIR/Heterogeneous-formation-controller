"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lcmt_resolved_contact(object):
    __slots__ = ["timestamp", "body_name", "num_basis_per_contact_point", "num_all_basis", "basis", "num_contact_points", "point_forces", "contact_points", "equivalent_wrench", "reference_point"]

    def __init__(self):
        self.timestamp = 0
        self.body_name = ""
        self.num_basis_per_contact_point = 0
        self.num_all_basis = 0
        self.basis = []
        self.num_contact_points = 0
        self.point_forces = [ [] for dim0 in range(3) ]
        self.contact_points = [ [] for dim0 in range(3) ]
        self.equivalent_wrench = [ 0.0 for dim0 in range(6) ]
        self.reference_point = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(lcmt_resolved_contact._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __body_name_encoded = self.body_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__body_name_encoded)+1))
        buf.write(__body_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ii", self.num_basis_per_contact_point, self.num_all_basis))
        buf.write(struct.pack('>%dd' % self.num_all_basis, *self.basis[:self.num_all_basis]))
        buf.write(struct.pack(">i", self.num_contact_points))
        for i0 in range(3):
            buf.write(struct.pack('>%dd' % self.num_contact_points, *self.point_forces[i0][:self.num_contact_points]))
        for i0 in range(3):
            buf.write(struct.pack('>%dd' % self.num_contact_points, *self.contact_points[i0][:self.num_contact_points]))
        buf.write(struct.pack('>6d', *self.equivalent_wrench[:6]))
        buf.write(struct.pack('>3d', *self.reference_point[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lcmt_resolved_contact._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lcmt_resolved_contact._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lcmt_resolved_contact()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __body_name_len = struct.unpack('>I', buf.read(4))[0]
        self.body_name = buf.read(__body_name_len)[:-1].decode('utf-8', 'replace')
        self.num_basis_per_contact_point, self.num_all_basis = struct.unpack(">ii", buf.read(8))
        self.basis = struct.unpack('>%dd' % self.num_all_basis, buf.read(self.num_all_basis * 8))
        self.num_contact_points = struct.unpack(">i", buf.read(4))[0]
        self.point_forces = []
        for i0 in range(3):
            self.point_forces.append(struct.unpack('>%dd' % self.num_contact_points, buf.read(self.num_contact_points * 8)))
        self.contact_points = []
        for i0 in range(3):
            self.contact_points.append(struct.unpack('>%dd' % self.num_contact_points, buf.read(self.num_contact_points * 8)))
        self.equivalent_wrench = struct.unpack('>6d', buf.read(48))
        self.reference_point = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lcmt_resolved_contact in parents: return 0
        tmphash = (0xe3953cb707390808) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lcmt_resolved_contact._packed_fingerprint is None:
            lcmt_resolved_contact._packed_fingerprint = struct.pack(">Q", lcmt_resolved_contact._get_hash_recursive([]))
        return lcmt_resolved_contact._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

