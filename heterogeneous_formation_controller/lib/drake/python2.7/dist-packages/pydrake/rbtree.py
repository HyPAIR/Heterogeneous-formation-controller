# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rbtree')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rbtree')
    _rbtree = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rbtree', [dirname(__file__)])
        except ImportError:
            import _rbtree
            return _rbtree
        if fp is not None:
            try:
                _mod = imp.load_module('_rbtree', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rbtree = swig_import_helper()
    del swig_import_helper
else:
    import _rbtree
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rbtree.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _rbtree.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rbtree.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rbtree.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rbtree.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rbtree.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rbtree.SwigPyIterator_copy(self)

    def next(self):
        return _rbtree.SwigPyIterator_next(self)

    def __next__(self):
        return _rbtree.SwigPyIterator___next__(self)

    def previous(self):
        return _rbtree.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rbtree.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rbtree.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rbtree.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rbtree.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rbtree.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rbtree.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rbtree.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _rbtree.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _rbtree.SHARED_PTR_DISOWN
import pydrake.autodiffutils
class vectorVectorXd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _rbtree.vectorVectorXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rbtree.vectorVectorXd___nonzero__(self)

    def __bool__(self):
        return _rbtree.vectorVectorXd___bool__(self)

    def __len__(self):
        return _rbtree.vectorVectorXd___len__(self)

    def pop(self):
        return _rbtree.vectorVectorXd_pop(self)

    def __getslice__(self, i, j):
        return _rbtree.vectorVectorXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rbtree.vectorVectorXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rbtree.vectorVectorXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rbtree.vectorVectorXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rbtree.vectorVectorXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rbtree.vectorVectorXd___setitem__(self, *args)

    def append(self, x):
        return _rbtree.vectorVectorXd_append(self, x)

    def empty(self):
        return _rbtree.vectorVectorXd_empty(self)

    def size(self):
        return _rbtree.vectorVectorXd_size(self)

    def swap(self, v):
        return _rbtree.vectorVectorXd_swap(self, v)

    def begin(self):
        return _rbtree.vectorVectorXd_begin(self)

    def end(self):
        return _rbtree.vectorVectorXd_end(self)

    def rbegin(self):
        return _rbtree.vectorVectorXd_rbegin(self)

    def rend(self):
        return _rbtree.vectorVectorXd_rend(self)

    def clear(self):
        return _rbtree.vectorVectorXd_clear(self)

    def get_allocator(self):
        return _rbtree.vectorVectorXd_get_allocator(self)

    def pop_back(self):
        return _rbtree.vectorVectorXd_pop_back(self)

    def erase(self, *args):
        return _rbtree.vectorVectorXd_erase(self, *args)

    def __init__(self, *args):
        this = _rbtree.new_vectorVectorXd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rbtree.vectorVectorXd_push_back(self, x)

    def front(self):
        return _rbtree.vectorVectorXd_front(self)

    def back(self):
        return _rbtree.vectorVectorXd_back(self)

    def assign(self, n, x):
        return _rbtree.vectorVectorXd_assign(self, n, x)

    def resize(self, *args):
        return _rbtree.vectorVectorXd_resize(self, *args)

    def insert(self, *args):
        return _rbtree.vectorVectorXd_insert(self, *args)

    def reserve(self, n):
        return _rbtree.vectorVectorXd_reserve(self, n)

    def capacity(self):
        return _rbtree.vectorVectorXd_capacity(self)
    __swig_destroy__ = _rbtree.delete_vectorVectorXd
    __del__ = lambda self: None
vectorVectorXd_swigregister = _rbtree.vectorVectorXd_swigregister
vectorVectorXd_swigregister(vectorVectorXd)

class vectorMatrixXd(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _rbtree.vectorMatrixXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rbtree.vectorMatrixXd___nonzero__(self)

    def __bool__(self):
        return _rbtree.vectorMatrixXd___bool__(self)

    def __len__(self):
        return _rbtree.vectorMatrixXd___len__(self)

    def pop(self):
        return _rbtree.vectorMatrixXd_pop(self)

    def __getslice__(self, i, j):
        return _rbtree.vectorMatrixXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rbtree.vectorMatrixXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rbtree.vectorMatrixXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rbtree.vectorMatrixXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rbtree.vectorMatrixXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rbtree.vectorMatrixXd___setitem__(self, *args)

    def append(self, x):
        return _rbtree.vectorMatrixXd_append(self, x)

    def empty(self):
        return _rbtree.vectorMatrixXd_empty(self)

    def size(self):
        return _rbtree.vectorMatrixXd_size(self)

    def swap(self, v):
        return _rbtree.vectorMatrixXd_swap(self, v)

    def begin(self):
        return _rbtree.vectorMatrixXd_begin(self)

    def end(self):
        return _rbtree.vectorMatrixXd_end(self)

    def rbegin(self):
        return _rbtree.vectorMatrixXd_rbegin(self)

    def rend(self):
        return _rbtree.vectorMatrixXd_rend(self)

    def clear(self):
        return _rbtree.vectorMatrixXd_clear(self)

    def get_allocator(self):
        return _rbtree.vectorMatrixXd_get_allocator(self)

    def pop_back(self):
        return _rbtree.vectorMatrixXd_pop_back(self)

    def erase(self, *args):
        return _rbtree.vectorMatrixXd_erase(self, *args)

    def __init__(self, *args):
        this = _rbtree.new_vectorMatrixXd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rbtree.vectorMatrixXd_push_back(self, x)

    def front(self):
        return _rbtree.vectorMatrixXd_front(self)

    def back(self):
        return _rbtree.vectorMatrixXd_back(self)

    def assign(self, n, x):
        return _rbtree.vectorMatrixXd_assign(self, n, x)

    def resize(self, *args):
        return _rbtree.vectorMatrixXd_resize(self, *args)

    def insert(self, *args):
        return _rbtree.vectorMatrixXd_insert(self, *args)

    def reserve(self, n):
        return _rbtree.vectorMatrixXd_reserve(self, n)

    def capacity(self):
        return _rbtree.vectorMatrixXd_capacity(self)
    __swig_destroy__ = _rbtree.delete_vectorMatrixXd
    __del__ = lambda self: None
vectorMatrixXd_swigregister = _rbtree.vectorMatrixXd_swigregister
vectorMatrixXd_swigregister(vectorMatrixXd)

class vectorString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _rbtree.vectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rbtree.vectorString___nonzero__(self)

    def __bool__(self):
        return _rbtree.vectorString___bool__(self)

    def __len__(self):
        return _rbtree.vectorString___len__(self)

    def pop(self):
        return _rbtree.vectorString_pop(self)

    def __getslice__(self, i, j):
        return _rbtree.vectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rbtree.vectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rbtree.vectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rbtree.vectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rbtree.vectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rbtree.vectorString___setitem__(self, *args)

    def append(self, x):
        return _rbtree.vectorString_append(self, x)

    def empty(self):
        return _rbtree.vectorString_empty(self)

    def size(self):
        return _rbtree.vectorString_size(self)

    def swap(self, v):
        return _rbtree.vectorString_swap(self, v)

    def begin(self):
        return _rbtree.vectorString_begin(self)

    def end(self):
        return _rbtree.vectorString_end(self)

    def rbegin(self):
        return _rbtree.vectorString_rbegin(self)

    def rend(self):
        return _rbtree.vectorString_rend(self)

    def clear(self):
        return _rbtree.vectorString_clear(self)

    def get_allocator(self):
        return _rbtree.vectorString_get_allocator(self)

    def pop_back(self):
        return _rbtree.vectorString_pop_back(self)

    def erase(self, *args):
        return _rbtree.vectorString_erase(self, *args)

    def __init__(self, *args):
        this = _rbtree.new_vectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rbtree.vectorString_push_back(self, x)

    def front(self):
        return _rbtree.vectorString_front(self)

    def back(self):
        return _rbtree.vectorString_back(self)

    def assign(self, n, x):
        return _rbtree.vectorString_assign(self, n, x)

    def resize(self, *args):
        return _rbtree.vectorString_resize(self, *args)

    def insert(self, *args):
        return _rbtree.vectorString_insert(self, *args)

    def reserve(self, n):
        return _rbtree.vectorString_reserve(self, n)

    def capacity(self):
        return _rbtree.vectorString_capacity(self)
    __swig_destroy__ = _rbtree.delete_vectorString
    __del__ = lambda self: None
vectorString_swigregister = _rbtree.vectorString_swigregister
vectorString_swigregister(vectorString)

class vectorInt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _rbtree.vectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rbtree.vectorInt___nonzero__(self)

    def __bool__(self):
        return _rbtree.vectorInt___bool__(self)

    def __len__(self):
        return _rbtree.vectorInt___len__(self)

    def pop(self):
        return _rbtree.vectorInt_pop(self)

    def __getslice__(self, i, j):
        return _rbtree.vectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rbtree.vectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rbtree.vectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rbtree.vectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rbtree.vectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rbtree.vectorInt___setitem__(self, *args)

    def append(self, x):
        return _rbtree.vectorInt_append(self, x)

    def empty(self):
        return _rbtree.vectorInt_empty(self)

    def size(self):
        return _rbtree.vectorInt_size(self)

    def swap(self, v):
        return _rbtree.vectorInt_swap(self, v)

    def begin(self):
        return _rbtree.vectorInt_begin(self)

    def end(self):
        return _rbtree.vectorInt_end(self)

    def rbegin(self):
        return _rbtree.vectorInt_rbegin(self)

    def rend(self):
        return _rbtree.vectorInt_rend(self)

    def clear(self):
        return _rbtree.vectorInt_clear(self)

    def get_allocator(self):
        return _rbtree.vectorInt_get_allocator(self)

    def pop_back(self):
        return _rbtree.vectorInt_pop_back(self)

    def erase(self, *args):
        return _rbtree.vectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _rbtree.new_vectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rbtree.vectorInt_push_back(self, x)

    def front(self):
        return _rbtree.vectorInt_front(self)

    def back(self):
        return _rbtree.vectorInt_back(self)

    def assign(self, n, x):
        return _rbtree.vectorInt_assign(self, n, x)

    def resize(self, *args):
        return _rbtree.vectorInt_resize(self, *args)

    def insert(self, *args):
        return _rbtree.vectorInt_insert(self, *args)

    def reserve(self, n):
        return _rbtree.vectorInt_reserve(self, n)

    def capacity(self):
        return _rbtree.vectorInt_capacity(self)
    __swig_destroy__ = _rbtree.delete_vectorInt
    __del__ = lambda self: None
vectorInt_swigregister = _rbtree.vectorInt_swigregister
vectorInt_swigregister(vectorInt)

class vectorFloat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _rbtree.vectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rbtree.vectorFloat___nonzero__(self)

    def __bool__(self):
        return _rbtree.vectorFloat___bool__(self)

    def __len__(self):
        return _rbtree.vectorFloat___len__(self)

    def pop(self):
        return _rbtree.vectorFloat_pop(self)

    def __getslice__(self, i, j):
        return _rbtree.vectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rbtree.vectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rbtree.vectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rbtree.vectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rbtree.vectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rbtree.vectorFloat___setitem__(self, *args)

    def append(self, x):
        return _rbtree.vectorFloat_append(self, x)

    def empty(self):
        return _rbtree.vectorFloat_empty(self)

    def size(self):
        return _rbtree.vectorFloat_size(self)

    def swap(self, v):
        return _rbtree.vectorFloat_swap(self, v)

    def begin(self):
        return _rbtree.vectorFloat_begin(self)

    def end(self):
        return _rbtree.vectorFloat_end(self)

    def rbegin(self):
        return _rbtree.vectorFloat_rbegin(self)

    def rend(self):
        return _rbtree.vectorFloat_rend(self)

    def clear(self):
        return _rbtree.vectorFloat_clear(self)

    def get_allocator(self):
        return _rbtree.vectorFloat_get_allocator(self)

    def pop_back(self):
        return _rbtree.vectorFloat_pop_back(self)

    def erase(self, *args):
        return _rbtree.vectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _rbtree.new_vectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rbtree.vectorFloat_push_back(self, x)

    def front(self):
        return _rbtree.vectorFloat_front(self)

    def back(self):
        return _rbtree.vectorFloat_back(self)

    def assign(self, n, x):
        return _rbtree.vectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _rbtree.vectorFloat_resize(self, *args)

    def insert(self, *args):
        return _rbtree.vectorFloat_insert(self, *args)

    def reserve(self, n):
        return _rbtree.vectorFloat_reserve(self, n)

    def capacity(self):
        return _rbtree.vectorFloat_capacity(self)
    __swig_destroy__ = _rbtree.delete_vectorFloat
    __del__ = lambda self: None
vectorFloat_swigregister = _rbtree.vectorFloat_swigregister
vectorFloat_swigregister(vectorFloat)

class vectorDouble(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _rbtree.vectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rbtree.vectorDouble___nonzero__(self)

    def __bool__(self):
        return _rbtree.vectorDouble___bool__(self)

    def __len__(self):
        return _rbtree.vectorDouble___len__(self)

    def pop(self):
        return _rbtree.vectorDouble_pop(self)

    def __getslice__(self, i, j):
        return _rbtree.vectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rbtree.vectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rbtree.vectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rbtree.vectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rbtree.vectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rbtree.vectorDouble___setitem__(self, *args)

    def append(self, x):
        return _rbtree.vectorDouble_append(self, x)

    def empty(self):
        return _rbtree.vectorDouble_empty(self)

    def size(self):
        return _rbtree.vectorDouble_size(self)

    def swap(self, v):
        return _rbtree.vectorDouble_swap(self, v)

    def begin(self):
        return _rbtree.vectorDouble_begin(self)

    def end(self):
        return _rbtree.vectorDouble_end(self)

    def rbegin(self):
        return _rbtree.vectorDouble_rbegin(self)

    def rend(self):
        return _rbtree.vectorDouble_rend(self)

    def clear(self):
        return _rbtree.vectorDouble_clear(self)

    def get_allocator(self):
        return _rbtree.vectorDouble_get_allocator(self)

    def pop_back(self):
        return _rbtree.vectorDouble_pop_back(self)

    def erase(self, *args):
        return _rbtree.vectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _rbtree.new_vectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rbtree.vectorDouble_push_back(self, x)

    def front(self):
        return _rbtree.vectorDouble_front(self)

    def back(self):
        return _rbtree.vectorDouble_back(self)

    def assign(self, n, x):
        return _rbtree.vectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _rbtree.vectorDouble_resize(self, *args)

    def insert(self, *args):
        return _rbtree.vectorDouble_insert(self, *args)

    def reserve(self, n):
        return _rbtree.vectorDouble_reserve(self, n)

    def capacity(self):
        return _rbtree.vectorDouble_capacity(self)
    __swig_destroy__ = _rbtree.delete_vectorDouble
    __del__ = lambda self: None
vectorDouble_swigregister = _rbtree.vectorDouble_swigregister
vectorDouble_swigregister(vectorDouble)

class mapStringString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _rbtree.mapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rbtree.mapStringString___nonzero__(self)

    def __bool__(self):
        return _rbtree.mapStringString___bool__(self)

    def __len__(self):
        return _rbtree.mapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _rbtree.mapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _rbtree.mapStringString___delitem__(self, key)

    def has_key(self, key):
        return _rbtree.mapStringString_has_key(self, key)

    def keys(self):
        return _rbtree.mapStringString_keys(self)

    def values(self):
        return _rbtree.mapStringString_values(self)

    def items(self):
        return _rbtree.mapStringString_items(self)

    def __contains__(self, key):
        return _rbtree.mapStringString___contains__(self, key)

    def key_iterator(self):
        return _rbtree.mapStringString_key_iterator(self)

    def value_iterator(self):
        return _rbtree.mapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _rbtree.mapStringString___setitem__(self, *args)

    def asdict(self):
        return _rbtree.mapStringString_asdict(self)

    def __init__(self, *args):
        this = _rbtree.new_mapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _rbtree.mapStringString_empty(self)

    def size(self):
        return _rbtree.mapStringString_size(self)

    def swap(self, v):
        return _rbtree.mapStringString_swap(self, v)

    def begin(self):
        return _rbtree.mapStringString_begin(self)

    def end(self):
        return _rbtree.mapStringString_end(self)

    def rbegin(self):
        return _rbtree.mapStringString_rbegin(self)

    def rend(self):
        return _rbtree.mapStringString_rend(self)

    def clear(self):
        return _rbtree.mapStringString_clear(self)

    def get_allocator(self):
        return _rbtree.mapStringString_get_allocator(self)

    def count(self, x):
        return _rbtree.mapStringString_count(self, x)

    def erase(self, *args):
        return _rbtree.mapStringString_erase(self, *args)

    def find(self, x):
        return _rbtree.mapStringString_find(self, x)

    def lower_bound(self, x):
        return _rbtree.mapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _rbtree.mapStringString_upper_bound(self, x)
    __swig_destroy__ = _rbtree.delete_mapStringString
    __del__ = lambda self: None
mapStringString_swigregister = _rbtree.mapStringString_swigregister
mapStringString_swigregister(mapStringString)

class vectorRigidBody(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _rbtree.vectorRigidBody_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rbtree.vectorRigidBody___nonzero__(self)

    def __bool__(self):
        return _rbtree.vectorRigidBody___bool__(self)

    def __len__(self):
        return _rbtree.vectorRigidBody___len__(self)

    def pop(self):
        return _rbtree.vectorRigidBody_pop(self)

    def __getslice__(self, i, j):
        return _rbtree.vectorRigidBody___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rbtree.vectorRigidBody___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rbtree.vectorRigidBody___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rbtree.vectorRigidBody___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rbtree.vectorRigidBody___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rbtree.vectorRigidBody___setitem__(self, *args)

    def append(self, x):
        return _rbtree.vectorRigidBody_append(self, x)

    def empty(self):
        return _rbtree.vectorRigidBody_empty(self)

    def size(self):
        return _rbtree.vectorRigidBody_size(self)

    def swap(self, v):
        return _rbtree.vectorRigidBody_swap(self, v)

    def begin(self):
        return _rbtree.vectorRigidBody_begin(self)

    def end(self):
        return _rbtree.vectorRigidBody_end(self)

    def rbegin(self):
        return _rbtree.vectorRigidBody_rbegin(self)

    def rend(self):
        return _rbtree.vectorRigidBody_rend(self)

    def clear(self):
        return _rbtree.vectorRigidBody_clear(self)

    def get_allocator(self):
        return _rbtree.vectorRigidBody_get_allocator(self)

    def pop_back(self):
        return _rbtree.vectorRigidBody_pop_back(self)

    def erase(self, *args):
        return _rbtree.vectorRigidBody_erase(self, *args)

    def __init__(self, *args):
        this = _rbtree.new_vectorRigidBody(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _rbtree.vectorRigidBody_push_back(self, x)

    def front(self):
        return _rbtree.vectorRigidBody_front(self)

    def back(self):
        return _rbtree.vectorRigidBody_back(self)

    def assign(self, n, x):
        return _rbtree.vectorRigidBody_assign(self, n, x)

    def resize(self, *args):
        return _rbtree.vectorRigidBody_resize(self, *args)

    def insert(self, *args):
        return _rbtree.vectorRigidBody_insert(self, *args)

    def reserve(self, n):
        return _rbtree.vectorRigidBody_reserve(self, n)

    def capacity(self):
        return _rbtree.vectorRigidBody_capacity(self)
    __swig_destroy__ = _rbtree.delete_vectorRigidBody
    __del__ = lambda self: None
vectorRigidBody_swigregister = _rbtree.vectorRigidBody_swigregister
vectorRigidBody_swigregister(vectorRigidBody)

class KinematicsCache_d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, bodies_in):
        this = _rbtree.new_KinematicsCache_d(bodies_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getElement(self, *args):
        return _rbtree.KinematicsCache_d_getElement(self, *args)

    def checkCachedKinematicsSettings(self, velocity_kinematics_required, jdot_times_v_required, method_name):
        return _rbtree.KinematicsCache_d_checkCachedKinematicsSettings(self, velocity_kinematics_required, jdot_times_v_required, method_name)

    def getQ(self):
        return _rbtree.KinematicsCache_d_getQ(self)

    def getV(self):
        return _rbtree.KinematicsCache_d_getV(self)

    def getX(self):
        return _rbtree.KinematicsCache_d_getX(self)

    def hasV(self):
        return _rbtree.KinematicsCache_d_hasV(self)

    def setInertiasCached(self):
        return _rbtree.KinematicsCache_d_setInertiasCached(self)

    def areInertiasCached(self):
        return _rbtree.KinematicsCache_d_areInertiasCached(self)

    def setPositionKinematicsCached(self):
        return _rbtree.KinematicsCache_d_setPositionKinematicsCached(self)

    def setJdotVCached(self, jdotV_cached_in):
        return _rbtree.KinematicsCache_d_setJdotVCached(self, jdotV_cached_in)

    def get_num_positions(self):
        return _rbtree.KinematicsCache_d_get_num_positions(self)

    def getNumPositions(self):
        return _rbtree.KinematicsCache_d_getNumPositions(self)

    def get_num_velocities(self):
        return _rbtree.KinematicsCache_d_get_num_velocities(self)

    def getNumVelocities(self):
        return _rbtree.KinematicsCache_d_getNumVelocities(self)
    __swig_destroy__ = _rbtree.delete_KinematicsCache_d
    __del__ = lambda self: None
KinematicsCache_d_swigregister = _rbtree.KinematicsCache_d_swigregister
KinematicsCache_d_swigregister(KinematicsCache_d)

class KinematicsCache_adVectorDynamic(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, bodies_in):
        this = _rbtree.new_KinematicsCache_adVectorDynamic(bodies_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getElement(self, *args):
        return _rbtree.KinematicsCache_adVectorDynamic_getElement(self, *args)

    def checkCachedKinematicsSettings(self, velocity_kinematics_required, jdot_times_v_required, method_name):
        return _rbtree.KinematicsCache_adVectorDynamic_checkCachedKinematicsSettings(self, velocity_kinematics_required, jdot_times_v_required, method_name)

    def getQ(self):
        return _rbtree.KinematicsCache_adVectorDynamic_getQ(self)

    def getV(self):
        return _rbtree.KinematicsCache_adVectorDynamic_getV(self)

    def getX(self):
        return _rbtree.KinematicsCache_adVectorDynamic_getX(self)

    def hasV(self):
        return _rbtree.KinematicsCache_adVectorDynamic_hasV(self)

    def setInertiasCached(self):
        return _rbtree.KinematicsCache_adVectorDynamic_setInertiasCached(self)

    def areInertiasCached(self):
        return _rbtree.KinematicsCache_adVectorDynamic_areInertiasCached(self)

    def setPositionKinematicsCached(self):
        return _rbtree.KinematicsCache_adVectorDynamic_setPositionKinematicsCached(self)

    def setJdotVCached(self, jdotV_cached_in):
        return _rbtree.KinematicsCache_adVectorDynamic_setJdotVCached(self, jdotV_cached_in)

    def get_num_positions(self):
        return _rbtree.KinematicsCache_adVectorDynamic_get_num_positions(self)

    def getNumPositions(self):
        return _rbtree.KinematicsCache_adVectorDynamic_getNumPositions(self)

    def get_num_velocities(self):
        return _rbtree.KinematicsCache_adVectorDynamic_get_num_velocities(self)

    def getNumVelocities(self):
        return _rbtree.KinematicsCache_adVectorDynamic_getNumVelocities(self)
    __swig_destroy__ = _rbtree.delete_KinematicsCache_adVectorDynamic
    __del__ = lambda self: None
KinematicsCache_adVectorDynamic_swigregister = _rbtree.KinematicsCache_adVectorDynamic_swigregister
KinematicsCache_adVectorDynamic_swigregister(KinematicsCache_adVectorDynamic)

class KinematicsCache_adVectorMax73(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, bodies_in):
        this = _rbtree.new_KinematicsCache_adVectorMax73(bodies_in)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getElement(self, *args):
        return _rbtree.KinematicsCache_adVectorMax73_getElement(self, *args)

    def checkCachedKinematicsSettings(self, velocity_kinematics_required, jdot_times_v_required, method_name):
        return _rbtree.KinematicsCache_adVectorMax73_checkCachedKinematicsSettings(self, velocity_kinematics_required, jdot_times_v_required, method_name)

    def getQ(self):
        return _rbtree.KinematicsCache_adVectorMax73_getQ(self)

    def getV(self):
        return _rbtree.KinematicsCache_adVectorMax73_getV(self)

    def getX(self):
        return _rbtree.KinematicsCache_adVectorMax73_getX(self)

    def hasV(self):
        return _rbtree.KinematicsCache_adVectorMax73_hasV(self)

    def setInertiasCached(self):
        return _rbtree.KinematicsCache_adVectorMax73_setInertiasCached(self)

    def areInertiasCached(self):
        return _rbtree.KinematicsCache_adVectorMax73_areInertiasCached(self)

    def setPositionKinematicsCached(self):
        return _rbtree.KinematicsCache_adVectorMax73_setPositionKinematicsCached(self)

    def setJdotVCached(self, jdotV_cached_in):
        return _rbtree.KinematicsCache_adVectorMax73_setJdotVCached(self, jdotV_cached_in)

    def get_num_positions(self):
        return _rbtree.KinematicsCache_adVectorMax73_get_num_positions(self)

    def getNumPositions(self):
        return _rbtree.KinematicsCache_adVectorMax73_getNumPositions(self)

    def get_num_velocities(self):
        return _rbtree.KinematicsCache_adVectorMax73_get_num_velocities(self)

    def getNumVelocities(self):
        return _rbtree.KinematicsCache_adVectorMax73_getNumVelocities(self)
    __swig_destroy__ = _rbtree.delete_KinematicsCache_adVectorMax73
    __del__ = lambda self: None
KinematicsCache_adVectorMax73_swigregister = _rbtree.KinematicsCache_adVectorMax73_swigregister
KinematicsCache_adVectorMax73_swigregister(KinematicsCache_adVectorMax73)

class AutoDiff3XDynamic(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rbtree.new_AutoDiff3XDynamic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self):
        return _rbtree.AutoDiff3XDynamic_value(self)

    def derivatives(self):
        return _rbtree.AutoDiff3XDynamic_derivatives(self)

    def arrayMultiply(self, other):
        return _rbtree.AutoDiff3XDynamic_arrayMultiply(self, other)

    def arrayDivide(self, other):
        return _rbtree.AutoDiff3XDynamic_arrayDivide(self, other)

    def __add__(self, *args):
        return _rbtree.AutoDiff3XDynamic___add__(self, *args)

    def __sub__(self, *args):
        return _rbtree.AutoDiff3XDynamic___sub__(self, *args)

    def __mul__(self, other):
        return _rbtree.AutoDiff3XDynamic___mul__(self, other)

    def __div__(self, other):
        return _rbtree.AutoDiff3XDynamic___div__(self, other)

    def rows(self):
        return _rbtree.AutoDiff3XDynamic_rows(self)

    def cols(self):
        return _rbtree.AutoDiff3XDynamic_cols(self)

    def size(self):
        return _rbtree.AutoDiff3XDynamic_size(self)
    __swig_destroy__ = _rbtree.delete_AutoDiff3XDynamic
    __del__ = lambda self: None
AutoDiff3XDynamic_swigregister = _rbtree.AutoDiff3XDynamic_swigregister
AutoDiff3XDynamic_swigregister(AutoDiff3XDynamic)

class AutoDiff3XMax73(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rbtree.new_AutoDiff3XMax73(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self):
        return _rbtree.AutoDiff3XMax73_value(self)

    def derivatives(self):
        return _rbtree.AutoDiff3XMax73_derivatives(self)

    def arrayMultiply(self, other):
        return _rbtree.AutoDiff3XMax73_arrayMultiply(self, other)

    def arrayDivide(self, other):
        return _rbtree.AutoDiff3XMax73_arrayDivide(self, other)

    def __add__(self, *args):
        return _rbtree.AutoDiff3XMax73___add__(self, *args)

    def __sub__(self, *args):
        return _rbtree.AutoDiff3XMax73___sub__(self, *args)

    def __mul__(self, other):
        return _rbtree.AutoDiff3XMax73___mul__(self, other)

    def __div__(self, other):
        return _rbtree.AutoDiff3XMax73___div__(self, other)

    def rows(self):
        return _rbtree.AutoDiff3XMax73_rows(self)

    def cols(self):
        return _rbtree.AutoDiff3XMax73_cols(self)

    def size(self):
        return _rbtree.AutoDiff3XMax73_size(self)
    __swig_destroy__ = _rbtree.delete_AutoDiff3XMax73
    __del__ = lambda self: None
AutoDiff3XMax73_swigregister = _rbtree.AutoDiff3XMax73_swigregister
AutoDiff3XMax73_swigregister(AutoDiff3XMax73)

class RigidBodyFrame(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rbtree.new_RigidBodyFrame(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_model_instance_id(self):
        return _rbtree.RigidBodyFrame_get_model_instance_id(self)

    def get_name(self):
        return _rbtree.RigidBodyFrame_get_name(self)

    def get_rigid_body(self):
        return _rbtree.RigidBodyFrame_get_rigid_body(self)

    def get_mutable_rigid_body(self):
        return _rbtree.RigidBodyFrame_get_mutable_rigid_body(self)

    def get_transform_to_body(self):
        return _rbtree.RigidBodyFrame_get_transform_to_body(self)

    def get_mutable_transform_to_body(self):
        return _rbtree.RigidBodyFrame_get_mutable_transform_to_body(self)

    def get_frame_index(self):
        return _rbtree.RigidBodyFrame_get_frame_index(self)

    def set_name(self, name):
        return _rbtree.RigidBodyFrame_set_name(self, name)

    def set_rigid_body(self, rigid_body):
        return _rbtree.RigidBodyFrame_set_rigid_body(self, rigid_body)

    def has_as_rigid_body(self, rigid_body):
        return _rbtree.RigidBodyFrame_has_as_rigid_body(self, rigid_body)

    def set_frame_index(self, frame_index):
        return _rbtree.RigidBodyFrame_set_frame_index(self, frame_index)

    def set_transform_to_body(self, transform_to_body):
        return _rbtree.RigidBodyFrame_set_transform_to_body(self, transform_to_body)
    __swig_destroy__ = _rbtree.delete_RigidBodyFrame
    __del__ = lambda self: None
RigidBodyFrame_swigregister = _rbtree.RigidBodyFrame_swigregister
RigidBodyFrame_swigregister(RigidBodyFrame)

BASIS_VECTOR_HALF_COUNT = _rbtree.BASIS_VECTOR_HALF_COUNT
EPSILON = _rbtree.EPSILON
kFixed = _rbtree.kFixed
kRollPitchYaw = _rbtree.kRollPitchYaw
kQuaternion = _rbtree.kQuaternion
class RigidBodyTree_d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _rbtree.delete_RigidBodyTree_d
    __del__ = lambda self: None

    def addRobotFromURDFString(self, *args):
        return _rbtree.RigidBodyTree_d_addRobotFromURDFString(self, *args)

    def addRobotFromURDF(self, *args):
        return _rbtree.RigidBodyTree_d_addRobotFromURDF(self, *args)

    def addRobotFromSDF(self, *args):
        return _rbtree.RigidBodyTree_d_addRobotFromSDF(self, *args)

    def add_model_instance(self):
        return _rbtree.RigidBodyTree_d_add_model_instance(self)

    def get_next_clique_id(self):
        return _rbtree.RigidBodyTree_d_get_next_clique_id(self)

    def get_num_model_instances(self):
        return _rbtree.RigidBodyTree_d_get_num_model_instances(self)

    def get_number_of_model_instances(self):
        return _rbtree.RigidBodyTree_d_get_number_of_model_instances(self)

    def addFrame(self, frame):
        return _rbtree.RigidBodyTree_d_addFrame(self, frame)

    def computePositionNameToIndexMap(self):
        return _rbtree.RigidBodyTree_d_computePositionNameToIndexMap(self)

    def surfaceTangents(self, normals, tangents):
        return _rbtree.RigidBodyTree_d_surfaceTangents(self, normals, tangents)

    def transformCollisionFrame(self, eid, transform_body_to_joint):
        return _rbtree.RigidBodyTree_d_transformCollisionFrame(self, eid, transform_body_to_joint)

    def compile(self):
        return _rbtree.RigidBodyTree_d_compile(self)

    def getZeroConfiguration(self):
        return _rbtree.RigidBodyTree_d_getZeroConfiguration(self)

    def get_position_name(self, position_num):
        return _rbtree.RigidBodyTree_d_get_position_name(self, position_num)

    def get_velocity_name(self, velocity_num):
        return _rbtree.RigidBodyTree_d_get_velocity_name(self, velocity_num)

    def getPositionName(self, position_num):
        return _rbtree.RigidBodyTree_d_getPositionName(self, position_num)

    def getVelocityName(self, velocity_num):
        return _rbtree.RigidBodyTree_d_getVelocityName(self, velocity_num)

    def getStateName(self, state_num):
        return _rbtree.RigidBodyTree_d_getStateName(self, state_num)

    def drawKinematicTree(self, graphviz_dotfile_filename):
        return _rbtree.RigidBodyTree_d_drawKinematicTree(self, graphviz_dotfile_filename)

    def is_part_of_model_instances(self, body, model_instance_id_set):
        return _rbtree.RigidBodyTree_d_is_part_of_model_instances(self, body, model_instance_id_set)

    def getMass(self, *args):
        return _rbtree.RigidBodyTree_d_getMass(self, *args)

    def getNumJointLimitConstraints(self):
        return _rbtree.RigidBodyTree_d_getNumJointLimitConstraints(self)

    def getNumContacts(self, body_idx):
        return _rbtree.RigidBodyTree_d_getNumContacts(self, body_idx)

    def FindAncestorBodies(self, body_index):
        return _rbtree.RigidBodyTree_d_FindAncestorBodies(self, body_index)

    def findAncestorBodies(self, ancestor_bodies, body):
        return _rbtree.RigidBodyTree_d_findAncestorBodies(self, ancestor_bodies, body)

    def findKinematicPath(self, start_body_or_frame_idx, end_body_or_frame_idx):
        return _rbtree.RigidBodyTree_d_findKinematicPath(self, start_body_or_frame_idx, end_body_or_frame_idx)

    def addCollisionElement(self, element, body, group_name):
        return _rbtree.RigidBodyTree_d_addCollisionElement(self, element, body, group_name)

    def updateCollisionElements(self, body, transform_to_world):
        return _rbtree.RigidBodyTree_d_updateCollisionElements(self, body, transform_to_world)

    def updateStaticCollisionElements(self):
        return _rbtree.RigidBodyTree_d_updateStaticCollisionElements(self)

    def updateDynamicCollisionElements(self, kin_cache):
        return _rbtree.RigidBodyTree_d_updateDynamicCollisionElements(self, kin_cache)

    def collisionRaycast(self, *args):
        return _rbtree.RigidBodyTree_d_collisionRaycast(self, *args)

    def collisionDetectFromPoints(self, cache, points, phi, normal, x, body_x, body_idx, use_margins):
        return _rbtree.RigidBodyTree_d_collisionDetectFromPoints(self, cache, points, phi, normal, x, body_x, body_idx, use_margins)

    def collisionDetect(self, *args):
        return _rbtree.RigidBodyTree_d_collisionDetect(self, *args)

    def allCollisions(self, cache, bodyA_idx, bodyB_idx, ptsA, ptsB, use_margins=True):
        return _rbtree.RigidBodyTree_d_allCollisions(self, cache, bodyA_idx, bodyB_idx, ptsA, ptsB, use_margins)

    def potentialCollisions(self, cache, phi, normal, xA, xB, bodyA_idx, bodyB_idx, use_margins=True):
        return _rbtree.RigidBodyTree_d_potentialCollisions(self, cache, phi, normal, xA, xB, bodyA_idx, bodyB_idx, use_margins)

    def AllPairsClosestPoints(self, cache, pairs, use_margins=True):
        return _rbtree.RigidBodyTree_d_AllPairsClosestPoints(self, cache, pairs, use_margins)

    def AllPairsClosestPointsInSet(self, cache, ids_to_check, pairs, use_margins):
        return _rbtree.RigidBodyTree_d_AllPairsClosestPointsInSet(self, cache, ids_to_check, pairs, use_margins)

    def ComputeMaximumDepthCollisionPoints(self, cache, use_margins=True):
        return _rbtree.RigidBodyTree_d_ComputeMaximumDepthCollisionPoints(self, cache, use_margins)

    def collidingPointsCheckOnly(self, cache, points, collision_threshold):
        return _rbtree.RigidBodyTree_d_collidingPointsCheckOnly(self, cache, points, collision_threshold)

    def collidingPoints(self, cache, points, collision_threshold):
        return _rbtree.RigidBodyTree_d_collidingPoints(self, cache, points, collision_threshold)

    def FindBody(self, *args):
        return _rbtree.RigidBodyTree_d_FindBody(self, *args)

    def FindModelInstanceBodies(self, model_instance_id):
        return _rbtree.RigidBodyTree_d_FindModelInstanceBodies(self, model_instance_id)

    def findLink(self, *args):
        return _rbtree.RigidBodyTree_d_findLink(self, *args)

    def FindBaseBodies(self, model_instance_id=-1):
        return _rbtree.RigidBodyTree_d_FindBaseBodies(self, model_instance_id)

    def FindBodyIndex(self, body_name, model_instance_id=-1):
        return _rbtree.RigidBodyTree_d_FindBodyIndex(self, body_name, model_instance_id)

    def FindChildrenOfBody(self, parent_body_index, model_instance_id=-1):
        return _rbtree.RigidBodyTree_d_FindChildrenOfBody(self, parent_body_index, model_instance_id)

    def findLinkId(self, link_name, model_id=-1):
        return _rbtree.RigidBodyTree_d_findLinkId(self, link_name, model_id)

    def FindChildBodyOfJoint(self, joint_name, model_instance_id=-1):
        return _rbtree.RigidBodyTree_d_FindChildBodyOfJoint(self, joint_name, model_instance_id)

    def findJoint(self, joint_name, model_id=-1):
        return _rbtree.RigidBodyTree_d_findJoint(self, joint_name, model_id)

    def FindIndexOfChildBodyOfJoint(self, joint_name, model_instance_id=-1):
        return _rbtree.RigidBodyTree_d_FindIndexOfChildBodyOfJoint(self, joint_name, model_instance_id)

    def findJointId(self, joint_name, model_id=-1):
        return _rbtree.RigidBodyTree_d_findJointId(self, joint_name, model_id)

    def findFrame(self, frame_name, model_id=-1):
        return _rbtree.RigidBodyTree_d_findFrame(self, frame_name, model_id)

    def get_body(self, body_index):
        return _rbtree.RigidBodyTree_d_get_body(self, body_index)

    def get_num_bodies(self):
        return _rbtree.RigidBodyTree_d_get_num_bodies(self)

    def get_number_of_bodies(self):
        return _rbtree.RigidBodyTree_d_get_number_of_bodies(self)

    def getBodyOrFrameName(self, body_or_frame_id):
        return _rbtree.RigidBodyTree_d_getBodyOrFrameName(self, body_or_frame_id)

    def GetActuator(self, name):
        return _rbtree.RigidBodyTree_d_GetActuator(self, name)

    def parseBodyOrFrameID(self, body_or_frame_id):
        return _rbtree.RigidBodyTree_d_parseBodyOrFrameID(self, body_or_frame_id)

    def getNumPositionConstraints(self):
        return _rbtree.RigidBodyTree_d_getNumPositionConstraints(self)

    def world(self, *args):
        return _rbtree.RigidBodyTree_d_world(self, *args)

    def get_num_positions(self):
        return _rbtree.RigidBodyTree_d_get_num_positions(self)

    def number_of_positions(self):
        return _rbtree.RigidBodyTree_d_number_of_positions(self)

    def get_num_velocities(self):
        return _rbtree.RigidBodyTree_d_get_num_velocities(self)

    def number_of_velocities(self):
        return _rbtree.RigidBodyTree_d_number_of_velocities(self)
    joint_limit_min = _swig_property(_rbtree.RigidBodyTree_d_joint_limit_min_get, _rbtree.RigidBodyTree_d_joint_limit_min_set)
    joint_limit_max = _swig_property(_rbtree.RigidBodyTree_d_joint_limit_max_get, _rbtree.RigidBodyTree_d_joint_limit_max_set)
    frames = _swig_property(_rbtree.RigidBodyTree_d_frames_get, _rbtree.RigidBodyTree_d_frames_set)
    actuators = _swig_property(_rbtree.RigidBodyTree_d_actuators_get)
    loops = _swig_property(_rbtree.RigidBodyTree_d_loops_get)
    a_grav = _swig_property(_rbtree.RigidBodyTree_d_a_grav_get, _rbtree.RigidBodyTree_d_a_grav_set)
    B = _swig_property(_rbtree.RigidBodyTree_d_B_get, _rbtree.RigidBodyTree_d_B_set)

    def __init__(self, *args):
        this = _rbtree.new_RigidBodyTree_d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doKinematics(self, *args):
        return _rbtree.RigidBodyTree_d_doKinematics(self, *args)

    def relativeTransform(self, cache, base_or_frame_ind, body_or_frame_ind):
        return _rbtree.RigidBodyTree_d_relativeTransform(self, cache, base_or_frame_ind, body_or_frame_ind)

    def getTerrainContactPoints(self, *args):
        return _rbtree.RigidBodyTree_d_getTerrainContactPoints(self, *args)

    def transformPoints(self, *args):
        return _rbtree.RigidBodyTree_d_transformPoints(self, *args)

    def centerOfMass(self, *args):
        return _rbtree.RigidBodyTree_d_centerOfMass(self, *args)

    def centerOfMassJacobian(self, *args):
        return _rbtree.RigidBodyTree_d_centerOfMassJacobian(self, *args)

    def getRandomConfiguration(self, *args):
        return _rbtree.RigidBodyTree_d_getRandomConfiguration(self, *args)
RigidBodyTree_d_swigregister = _rbtree.RigidBodyTree_d_swigregister
RigidBodyTree_d_swigregister(RigidBodyTree_d)
cvar = _rbtree.cvar
RigidBodyTree_d.kWorldName = _rbtree.cvar.RigidBodyTree_d_kWorldName
RigidBodyTree_d.kWorldBodyIndex = _rbtree.cvar.RigidBodyTree_d_kWorldBodyIndex
RigidBodyTree_d.default_model_instance_id_set = _rbtree.cvar.RigidBodyTree_d_default_model_instance_id_set

class RigidBody_d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _rbtree.new_RigidBody_d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_name(self):
        return _rbtree.RigidBody_d_get_name(self)

    def set_name(self, name):
        return _rbtree.RigidBody_d_set_name(self, name)

    def get_model_name(self):
        return _rbtree.RigidBody_d_get_model_name(self)

    def set_model_name(self, name):
        return _rbtree.RigidBody_d_set_model_name(self, name)

    def get_model_instance_id(self):
        return _rbtree.RigidBody_d_get_model_instance_id(self)

    def set_model_instance_id(self, model_instance_id):
        return _rbtree.RigidBody_d_set_model_instance_id(self, model_instance_id)

    def getJoint(self):
        return _rbtree.RigidBody_d_getJoint(self)

    def set_parent(self, parent):
        return _rbtree.RigidBody_d_set_parent(self, parent)

    def get_parent(self):
        return _rbtree.RigidBody_d_get_parent(self)

    def has_parent_body(self):
        return _rbtree.RigidBody_d_has_parent_body(self)

    def hasParent(self):
        return _rbtree.RigidBody_d_hasParent(self)

    def has_as_parent(self, other):
        return _rbtree.RigidBody_d_has_as_parent(self, other)

    def set_body_index(self, body_index):
        return _rbtree.RigidBody_d_set_body_index(self, body_index)

    def get_body_index(self):
        return _rbtree.RigidBody_d_get_body_index(self)

    def set_position_start_index(self, position_start_index):
        return _rbtree.RigidBody_d_set_position_start_index(self, position_start_index)

    def get_position_start_index(self):
        return _rbtree.RigidBody_d_get_position_start_index(self)

    def set_velocity_start_index(self, velocity_start_index):
        return _rbtree.RigidBody_d_set_velocity_start_index(self, velocity_start_index)

    def get_velocity_start_index(self):
        return _rbtree.RigidBody_d_get_velocity_start_index(self)

    def AddVisualElement(self, elements):
        return _rbtree.RigidBody_d_AddVisualElement(self, elements)

    def get_visual_elements(self):
        return _rbtree.RigidBody_d_get_visual_elements(self)

    def SetSelfCollisionClique(self, clique_id):
        return _rbtree.RigidBody_d_SetSelfCollisionClique(self, clique_id)

    def AddCollisionElement(self, group_name, element):
        return _rbtree.RigidBody_d_AddCollisionElement(self, group_name, element)

    def get_collision_element_ids(self):
        return _rbtree.RigidBody_d_get_collision_element_ids(self)

    def get_mutable_collision_element_ids(self):
        return _rbtree.RigidBody_d_get_mutable_collision_element_ids(self)

    def get_group_to_collision_ids_map(self):
        return _rbtree.RigidBody_d_get_group_to_collision_ids_map(self)

    def get_mutable_group_to_collision_ids_map(self):
        return _rbtree.RigidBody_d_get_mutable_group_to_collision_ids_map(self)

    def setCollisionFilter(self, group, ignores):
        return _rbtree.RigidBody_d_setCollisionFilter(self, group, ignores)

    def getCollisionFilterGroup(self):
        return _rbtree.RigidBody_d_getCollisionFilterGroup(self)

    def setCollisionFilterGroup(self, group):
        return _rbtree.RigidBody_d_setCollisionFilterGroup(self, group)

    def getCollisionFilterIgnores(self):
        return _rbtree.RigidBody_d_getCollisionFilterIgnores(self)

    def setCollisionFilterIgnores(self, ignores):
        return _rbtree.RigidBody_d_setCollisionFilterIgnores(self, ignores)

    def addToCollisionFilterGroup(self, group):
        return _rbtree.RigidBody_d_addToCollisionFilterGroup(self, group)

    def ignoreCollisionFilterGroup(self, group):
        return _rbtree.RigidBody_d_ignoreCollisionFilterGroup(self, group)

    def collideWithCollisionFilterGroup(self, group):
        return _rbtree.RigidBody_d_collideWithCollisionFilterGroup(self, group)

    def adjacentTo(self, other):
        return _rbtree.RigidBody_d_adjacentTo(self, other)

    def CanCollideWith(self, other):
        return _rbtree.RigidBody_d_CanCollideWith(self, other)

    def appendCollisionElementIdsFromThisBody(self, *args):
        return _rbtree.RigidBody_d_appendCollisionElementIdsFromThisBody(self, *args)

    def get_contact_points(self):
        return _rbtree.RigidBody_d_get_contact_points(self)

    def set_contact_points(self, contact_points):
        return _rbtree.RigidBody_d_set_contact_points(self, contact_points)

    def set_mass(self, mass):
        return _rbtree.RigidBody_d_set_mass(self, mass)

    def get_mass(self):
        return _rbtree.RigidBody_d_get_mass(self)

    def set_center_of_mass(self, center_of_mass):
        return _rbtree.RigidBody_d_set_center_of_mass(self, center_of_mass)

    def get_center_of_mass(self):
        return _rbtree.RigidBody_d_get_center_of_mass(self)

    def set_spatial_inertia(self, inertia_matrix):
        return _rbtree.RigidBody_d_set_spatial_inertia(self, inertia_matrix)

    def get_spatial_inertia(self):
        return _rbtree.RigidBody_d_get_spatial_inertia(self)

    def ApplyTransformToJointFrame(self, transform_body_to_joint):
        return _rbtree.RigidBody_d_ApplyTransformToJointFrame(self, transform_body_to_joint)

    def AddCollisionElementsToClique(self, clique_id):
        return _rbtree.RigidBody_d_AddCollisionElementsToClique(self, clique_id)
    __swig_destroy__ = _rbtree.delete_RigidBody_d
    __del__ = lambda self: None
RigidBody_d_swigregister = _rbtree.RigidBody_d_swigregister
RigidBody_d_swigregister(RigidBody_d)



