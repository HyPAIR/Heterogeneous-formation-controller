# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_autodiffutils')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_autodiffutils')
    _autodiffutils = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_autodiffutils', [dirname(__file__)])
        except ImportError:
            import _autodiffutils
            return _autodiffutils
        if fp is not None:
            try:
                _mod = imp.load_module('_autodiffutils', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _autodiffutils = swig_import_helper()
    del swig_import_helper
else:
    import _autodiffutils
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class AutoDiffVectorDynamic(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _autodiffutils.new_AutoDiffVectorDynamic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self):
        return _autodiffutils.AutoDiffVectorDynamic_value(self)

    def derivatives(self):
        return _autodiffutils.AutoDiffVectorDynamic_derivatives(self)

    def arrayMultiply(self, other):
        return _autodiffutils.AutoDiffVectorDynamic_arrayMultiply(self, other)

    def arrayDivide(self, other):
        return _autodiffutils.AutoDiffVectorDynamic_arrayDivide(self, other)

    def __add__(self, *args):
        return _autodiffutils.AutoDiffVectorDynamic___add__(self, *args)

    def __sub__(self, *args):
        return _autodiffutils.AutoDiffVectorDynamic___sub__(self, *args)

    def __mul__(self, other):
        return _autodiffutils.AutoDiffVectorDynamic___mul__(self, other)

    def __div__(self, other):
        return _autodiffutils.AutoDiffVectorDynamic___div__(self, other)

    def rows(self):
        return _autodiffutils.AutoDiffVectorDynamic_rows(self)

    def cols(self):
        return _autodiffutils.AutoDiffVectorDynamic_cols(self)

    def size(self):
        return _autodiffutils.AutoDiffVectorDynamic_size(self)
    __swig_destroy__ = _autodiffutils.delete_AutoDiffVectorDynamic
    __del__ = lambda self: None
AutoDiffVectorDynamic_swigregister = _autodiffutils.AutoDiffVectorDynamic_swigregister
AutoDiffVectorDynamic_swigregister(AutoDiffVectorDynamic)

class AutoDiffVectorMax73(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _autodiffutils.new_AutoDiffVectorMax73(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self):
        return _autodiffutils.AutoDiffVectorMax73_value(self)

    def derivatives(self):
        return _autodiffutils.AutoDiffVectorMax73_derivatives(self)

    def arrayMultiply(self, other):
        return _autodiffutils.AutoDiffVectorMax73_arrayMultiply(self, other)

    def arrayDivide(self, other):
        return _autodiffutils.AutoDiffVectorMax73_arrayDivide(self, other)

    def __add__(self, *args):
        return _autodiffutils.AutoDiffVectorMax73___add__(self, *args)

    def __sub__(self, *args):
        return _autodiffutils.AutoDiffVectorMax73___sub__(self, *args)

    def __mul__(self, other):
        return _autodiffutils.AutoDiffVectorMax73___mul__(self, other)

    def __div__(self, other):
        return _autodiffutils.AutoDiffVectorMax73___div__(self, other)

    def rows(self):
        return _autodiffutils.AutoDiffVectorMax73_rows(self)

    def cols(self):
        return _autodiffutils.AutoDiffVectorMax73_cols(self)

    def size(self):
        return _autodiffutils.AutoDiffVectorMax73_size(self)
    __swig_destroy__ = _autodiffutils.delete_AutoDiffVectorMax73
    __del__ = lambda self: None
AutoDiffVectorMax73_swigregister = _autodiffutils.AutoDiffVectorMax73_swigregister
AutoDiffVectorMax73_swigregister(AutoDiffVectorMax73)

class AutoDiffMatrixDynamic(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _autodiffutils.new_AutoDiffMatrixDynamic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self):
        return _autodiffutils.AutoDiffMatrixDynamic_value(self)

    def derivatives(self):
        return _autodiffutils.AutoDiffMatrixDynamic_derivatives(self)

    def arrayMultiply(self, other):
        return _autodiffutils.AutoDiffMatrixDynamic_arrayMultiply(self, other)

    def arrayDivide(self, other):
        return _autodiffutils.AutoDiffMatrixDynamic_arrayDivide(self, other)

    def __add__(self, *args):
        return _autodiffutils.AutoDiffMatrixDynamic___add__(self, *args)

    def __sub__(self, *args):
        return _autodiffutils.AutoDiffMatrixDynamic___sub__(self, *args)

    def __mul__(self, other):
        return _autodiffutils.AutoDiffMatrixDynamic___mul__(self, other)

    def __div__(self, other):
        return _autodiffutils.AutoDiffMatrixDynamic___div__(self, other)

    def rows(self):
        return _autodiffutils.AutoDiffMatrixDynamic_rows(self)

    def cols(self):
        return _autodiffutils.AutoDiffMatrixDynamic_cols(self)

    def size(self):
        return _autodiffutils.AutoDiffMatrixDynamic_size(self)
    __swig_destroy__ = _autodiffutils.delete_AutoDiffMatrixDynamic
    __del__ = lambda self: None
AutoDiffMatrixDynamic_swigregister = _autodiffutils.AutoDiffMatrixDynamic_swigregister
AutoDiffMatrixDynamic_swigregister(AutoDiffMatrixDynamic)


import numpy

def toAutoDiff(value, derivatives=None):
    value = numpy.asarray(value)
    if derivatives is None:
        derivatives = numpy.eye(value.size, value.size)
    else:
        derivatives = numpy.asarray(derivatives)
        if derivatives.ndim < 2:
            derivatives = derivatives.reshape((-1,1))
    if value.ndim == 0:
        value = value.reshape((1,))
    if value.ndim < 2 or value.shape[1] == 1:
        if derivatives.shape[1] <= 73:
            return AutoDiffVectorMax73(value, derivatives)
        else:
            return AutoDiffVectorDynamic(value, derivatives)
    else:
        return AutoDiffMatrixDynamic(value, derivatives)




