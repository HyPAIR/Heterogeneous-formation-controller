"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class joint_angles_t(object):
    __slots__ = ["utime", "robot_name", "num_joints", "joint_name", "joint_position"]

    def __init__(self):
        self.utime = 0
        self.robot_name = ""
        self.num_joints = 0
        self.joint_name = []
        self.joint_position = []

    def encode(self):
        buf = BytesIO()
        buf.write(joint_angles_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __robot_name_encoded = self.robot_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__robot_name_encoded)+1))
        buf.write(__robot_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.num_joints))
        for i0 in range(self.num_joints):
            __joint_name_encoded = self.joint_name[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__joint_name_encoded)+1))
            buf.write(__joint_name_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.num_joints, *self.joint_position[:self.num_joints]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != joint_angles_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return joint_angles_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = joint_angles_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __robot_name_len = struct.unpack('>I', buf.read(4))[0]
        self.robot_name = buf.read(__robot_name_len)[:-1].decode('utf-8', 'replace')
        self.num_joints = struct.unpack(">i", buf.read(4))[0]
        self.joint_name = []
        for i0 in range(self.num_joints):
            __joint_name_len = struct.unpack('>I', buf.read(4))[0]
            self.joint_name.append(buf.read(__joint_name_len)[:-1].decode('utf-8', 'replace'))
        self.joint_position = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if joint_angles_t in parents: return 0
        tmphash = (0x1f3e6983dc7cf3c8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if joint_angles_t._packed_fingerprint is None:
            joint_angles_t._packed_fingerprint = struct.pack(">Q", joint_angles_t._get_hash_recursive([]))
        return joint_angles_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

