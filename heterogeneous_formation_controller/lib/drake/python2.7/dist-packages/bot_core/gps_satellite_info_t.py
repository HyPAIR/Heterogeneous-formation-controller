"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class gps_satellite_info_t(object):
    __slots__ = ["used_for_nav", "differential_correction_avail", "orbit_info_avail", "ephemeris", "healthy", "signal_quality", "carrier_to_noise", "azimuth", "elevation"]

    def __init__(self):
        self.used_for_nav = False
        self.differential_correction_avail = False
        self.orbit_info_avail = False
        self.ephemeris = False
        self.healthy = False
        self.signal_quality = 0
        self.carrier_to_noise = 0
        self.azimuth = 0.0
        self.elevation = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(gps_satellite_info_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbbbbhhdd", self.used_for_nav, self.differential_correction_avail, self.orbit_info_avail, self.ephemeris, self.healthy, self.signal_quality, self.carrier_to_noise, self.azimuth, self.elevation))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gps_satellite_info_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gps_satellite_info_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gps_satellite_info_t()
        self.used_for_nav = bool(struct.unpack('b', buf.read(1))[0])
        self.differential_correction_avail = bool(struct.unpack('b', buf.read(1))[0])
        self.orbit_info_avail = bool(struct.unpack('b', buf.read(1))[0])
        self.ephemeris = bool(struct.unpack('b', buf.read(1))[0])
        self.healthy = bool(struct.unpack('b', buf.read(1))[0])
        self.signal_quality, self.carrier_to_noise, self.azimuth, self.elevation = struct.unpack(">hhdd", buf.read(20))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gps_satellite_info_t in parents: return 0
        tmphash = (0x2ea0ffe63ed2d865) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gps_satellite_info_t._packed_fingerprint is None:
            gps_satellite_info_t._packed_fingerprint = struct.pack(">Q", gps_satellite_info_t._get_hash_recursive([]))
        return gps_satellite_info_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

