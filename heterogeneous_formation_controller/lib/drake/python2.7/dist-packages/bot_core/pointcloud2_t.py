"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import bot_core.pointfield_t

class pointcloud2_t(object):
    __slots__ = ["utime", "seq", "frame_id", "height", "width", "nfields", "fields", "is_bigendian", "point_step", "row_step", "data_nbytes", "data", "is_dense"]

    def __init__(self):
        self.utime = 0
        self.seq = 0
        self.frame_id = ""
        self.height = 0
        self.width = 0
        self.nfields = 0
        self.fields = []
        self.is_bigendian = False
        self.point_step = 0
        self.row_step = 0
        self.data_nbytes = 0
        self.data = ""
        self.is_dense = False

    def encode(self):
        buf = BytesIO()
        buf.write(pointcloud2_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.seq))
        __frame_id_encoded = self.frame_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__frame_id_encoded)+1))
        buf.write(__frame_id_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">iii", self.height, self.width, self.nfields))
        for i0 in range(self.nfields):
            assert self.fields[i0]._get_packed_fingerprint() == bot_core.pointfield_t._get_packed_fingerprint()
            self.fields[i0]._encode_one(buf)
        buf.write(struct.pack(">biii", self.is_bigendian, self.point_step, self.row_step, self.data_nbytes))
        buf.write(bytearray(self.data[:self.data_nbytes]))
        buf.write(struct.pack(">b", self.is_dense))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pointcloud2_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pointcloud2_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pointcloud2_t()
        self.utime, self.seq = struct.unpack(">qi", buf.read(12))
        __frame_id_len = struct.unpack('>I', buf.read(4))[0]
        self.frame_id = buf.read(__frame_id_len)[:-1].decode('utf-8', 'replace')
        self.height, self.width, self.nfields = struct.unpack(">iii", buf.read(12))
        self.fields = []
        for i0 in range(self.nfields):
            self.fields.append(bot_core.pointfield_t._decode_one(buf))
        self.is_bigendian = bool(struct.unpack('b', buf.read(1))[0])
        self.point_step, self.row_step, self.data_nbytes = struct.unpack(">iii", buf.read(12))
        self.data = buf.read(self.data_nbytes)
        self.is_dense = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pointcloud2_t in parents: return 0
        newparents = parents + [pointcloud2_t]
        tmphash = (0x53989df001a1c638+ bot_core.pointfield_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pointcloud2_t._packed_fingerprint is None:
            pointcloud2_t._packed_fingerprint = struct.pack(">Q", pointcloud2_t._get_hash_recursive([]))
        return pointcloud2_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

