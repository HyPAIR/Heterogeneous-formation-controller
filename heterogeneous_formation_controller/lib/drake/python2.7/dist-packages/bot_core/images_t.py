"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import bot_core.image_t

class images_t(object):
    __slots__ = ["utime", "n_images", "image_types", "images"]

    LEFT = 0
    RIGHT = 1
    DISPARITY = 2
    MASK_ZIPPED = 3
    DEPTH_MM = 4
    DISPARITY_ZIPPED = 5
    DEPTH_MM_ZIPPED = 6

    def __init__(self):
        self.utime = 0
        self.n_images = 0
        self.image_types = []
        self.images = []

    def encode(self):
        buf = BytesIO()
        buf.write(images_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.n_images))
        buf.write(struct.pack('>%dh' % self.n_images, *self.image_types[:self.n_images]))
        for i0 in range(self.n_images):
            assert self.images[i0]._get_packed_fingerprint() == bot_core.image_t._get_packed_fingerprint()
            self.images[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != images_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return images_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = images_t()
        self.utime, self.n_images = struct.unpack(">qi", buf.read(12))
        self.image_types = struct.unpack('>%dh' % self.n_images, buf.read(self.n_images * 2))
        self.images = []
        for i0 in range(self.n_images):
            self.images.append(bot_core.image_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if images_t in parents: return 0
        newparents = parents + [images_t]
        tmphash = (0xfbe98784e0a4fbad+ bot_core.image_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if images_t._packed_fingerprint is None:
            images_t._packed_fingerprint = struct.pack(">Q", images_t._get_hash_recursive([]))
        return images_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

