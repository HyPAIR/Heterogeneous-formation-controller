"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class viewer_draw_t(object):
    __slots__ = ["timestamp", "num_links", "link_name", "robot_num", "position", "quaternion"]

    def __init__(self):
        self.timestamp = 0
        self.num_links = 0
        self.link_name = []
        self.robot_num = []
        self.position = []
        self.quaternion = []

    def encode(self):
        buf = BytesIO()
        buf.write(viewer_draw_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.num_links))
        for i0 in range(self.num_links):
            __link_name_encoded = self.link_name[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__link_name_encoded)+1))
            buf.write(__link_name_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%di' % self.num_links, *self.robot_num[:self.num_links]))
        for i0 in range(self.num_links):
            buf.write(struct.pack('>3f', *self.position[i0][:3]))
        for i0 in range(self.num_links):
            buf.write(struct.pack('>4f', *self.quaternion[i0][:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != viewer_draw_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return viewer_draw_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = viewer_draw_t()
        self.timestamp, self.num_links = struct.unpack(">qi", buf.read(12))
        self.link_name = []
        for i0 in range(self.num_links):
            __link_name_len = struct.unpack('>I', buf.read(4))[0]
            self.link_name.append(buf.read(__link_name_len)[:-1].decode('utf-8', 'replace'))
        self.robot_num = struct.unpack('>%di' % self.num_links, buf.read(self.num_links * 4))
        self.position = []
        for i0 in range(self.num_links):
            self.position.append(struct.unpack('>3f', buf.read(12)))
        self.quaternion = []
        for i0 in range(self.num_links):
            self.quaternion.append(struct.unpack('>4f', buf.read(16)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if viewer_draw_t in parents: return 0
        tmphash = (0x20a785ff2d97a122) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if viewer_draw_t._packed_fingerprint is None:
            viewer_draw_t._packed_fingerprint = struct.pack(">Q", viewer_draw_t._get_hash_recursive([]))
        return viewer_draw_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

