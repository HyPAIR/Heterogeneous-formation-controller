"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class atlas_command_t(object):
    __slots__ = ["utime", "num_joints", "joint_names", "position", "velocity", "effort", "k_q_p", "k_q_i", "k_qd_p", "k_f_p", "ff_qd", "ff_qd_d", "ff_f_d", "ff_const", "k_effort", "desired_controller_period_ms"]

    def __init__(self):
        self.utime = 0
        self.num_joints = 0
        self.joint_names = []
        self.position = []
        self.velocity = []
        self.effort = []
        self.k_q_p = []
        self.k_q_i = []
        self.k_qd_p = []
        self.k_f_p = []
        self.ff_qd = []
        self.ff_qd_d = []
        self.ff_f_d = []
        self.ff_const = []
        self.k_effort = ""
        self.desired_controller_period_ms = 0

    def encode(self):
        buf = BytesIO()
        buf.write(atlas_command_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.num_joints))
        for i0 in range(self.num_joints):
            __joint_names_encoded = self.joint_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__joint_names_encoded)+1))
            buf.write(__joint_names_encoded)
            buf.write(b"\0")
        buf.write(struct.pack('>%dd' % self.num_joints, *self.position[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.velocity[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.effort[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.k_q_p[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.k_q_i[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.k_qd_p[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.k_f_p[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.ff_qd[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.ff_qd_d[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.ff_f_d[:self.num_joints]))
        buf.write(struct.pack('>%dd' % self.num_joints, *self.ff_const[:self.num_joints]))
        buf.write(bytearray(self.k_effort[:self.num_joints]))
        buf.write(struct.pack(">B", self.desired_controller_period_ms))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != atlas_command_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return atlas_command_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = atlas_command_t()
        self.utime, self.num_joints = struct.unpack(">qi", buf.read(12))
        self.joint_names = []
        for i0 in range(self.num_joints):
            __joint_names_len = struct.unpack('>I', buf.read(4))[0]
            self.joint_names.append(buf.read(__joint_names_len)[:-1].decode('utf-8', 'replace'))
        self.position = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.velocity = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.effort = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.k_q_p = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.k_q_i = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.k_qd_p = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.k_f_p = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.ff_qd = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.ff_qd_d = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.ff_f_d = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.ff_const = struct.unpack('>%dd' % self.num_joints, buf.read(self.num_joints * 8))
        self.k_effort = buf.read(self.num_joints)
        self.desired_controller_period_ms = struct.unpack(">B", buf.read(1))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if atlas_command_t in parents: return 0
        tmphash = (0x1b307c611a471a89) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if atlas_command_t._packed_fingerprint is None:
            atlas_command_t._packed_fingerprint = struct.pack(">Q", atlas_command_t._get_hash_recursive([]))
        return atlas_command_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

