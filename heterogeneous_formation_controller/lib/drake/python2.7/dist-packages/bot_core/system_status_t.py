"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class system_status_t(object):
    __slots__ = ["utime", "system", "importance", "frequency", "value"]

    MESSAGING = 0
    MOTION_ESTIMATION = 1
    TRACKING = 2
    CONTROL = 3
    GRASPING = 4
    DRIVING = 5
    PLANNING_BASE = 6
    PLANNING_ROBOT = 7
    FALL_DETECTOR = 8
    VERY_IMPORTANT = 0
    IMPORTANT = 1
    UNIMPORTANT = 2
    LOW_FREQUENCY = 0
    MEDIUM_FREQUENCY = 1
    HIGH_FREQUENCY = 2

    def __init__(self):
        self.utime = 0
        self.system = 0
        self.importance = 0
        self.frequency = 0
        self.value = ""

    def encode(self):
        buf = BytesIO()
        buf.write(system_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbb", self.utime, self.system, self.importance, self.frequency))
        __value_encoded = self.value.encode('utf-8')
        buf.write(struct.pack('>I', len(__value_encoded)+1))
        buf.write(__value_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != system_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return system_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = system_status_t()
        self.utime, self.system, self.importance, self.frequency = struct.unpack(">qbbb", buf.read(11))
        __value_len = struct.unpack('>I', buf.read(4))[0]
        self.value = buf.read(__value_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if system_status_t in parents: return 0
        tmphash = (0x1163e61b7484cf5b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if system_status_t._packed_fingerprint is None:
            system_status_t._packed_fingerprint = struct.pack(">Q", system_status_t._get_hash_recursive([]))
        return system_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

