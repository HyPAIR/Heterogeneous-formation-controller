"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class pointcloud_t(object):
    __slots__ = ["utime", "seq", "frame_id", "n_points", "points", "n_channels", "channel_names", "channels"]

    def __init__(self):
        self.utime = 0
        self.seq = 0
        self.frame_id = ""
        self.n_points = 0
        self.points = []
        self.n_channels = 0
        self.channel_names = []
        self.channels = []

    def encode(self):
        buf = BytesIO()
        buf.write(pointcloud_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.seq))
        __frame_id_encoded = self.frame_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__frame_id_encoded)+1))
        buf.write(__frame_id_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.n_points))
        for i0 in range(self.n_points):
            buf.write(struct.pack('>3f', *self.points[i0][:3]))
        buf.write(struct.pack(">i", self.n_channels))
        for i0 in range(self.n_channels):
            __channel_names_encoded = self.channel_names[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__channel_names_encoded)+1))
            buf.write(__channel_names_encoded)
            buf.write(b"\0")
        for i0 in range(self.n_channels):
            buf.write(struct.pack('>%df' % self.n_points, *self.channels[i0][:self.n_points]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pointcloud_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pointcloud_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pointcloud_t()
        self.utime, self.seq = struct.unpack(">qi", buf.read(12))
        __frame_id_len = struct.unpack('>I', buf.read(4))[0]
        self.frame_id = buf.read(__frame_id_len)[:-1].decode('utf-8', 'replace')
        self.n_points = struct.unpack(">i", buf.read(4))[0]
        self.points = []
        for i0 in range(self.n_points):
            self.points.append(struct.unpack('>3f', buf.read(12)))
        self.n_channels = struct.unpack(">i", buf.read(4))[0]
        self.channel_names = []
        for i0 in range(self.n_channels):
            __channel_names_len = struct.unpack('>I', buf.read(4))[0]
            self.channel_names.append(buf.read(__channel_names_len)[:-1].decode('utf-8', 'replace'))
        self.channels = []
        for i0 in range(self.n_channels):
            self.channels.append(struct.unpack('>%df' % self.n_points, buf.read(self.n_points * 4)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pointcloud_t in parents: return 0
        tmphash = (0x86c4ee3b7594a834) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pointcloud_t._packed_fingerprint is None:
            pointcloud_t._packed_fingerprint = struct.pack(">Q", pointcloud_t._get_hash_recursive([]))
        return pointcloud_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

